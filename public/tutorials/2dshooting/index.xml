<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Keep On Coding</title>
    <link>https://alkn203.github.io/blog/tutorials/2dshooting/</link>
    <description>Recent content on Keep On Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 03 Jul 2019 20:55:06 +0900</lastBuildDate>
    
	<atom:link href="https://alkn203.github.io/blog/tutorials/2dshooting/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【phina.js】2Dシューティングチュートリアル =第12回 エネミーのHP設定など=</title>
      <link>https://alkn203.github.io/blog/2019/07/03/phina-shooting-12/</link>
      <pubDate>Wed, 03 Jul 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2019/07/03/phina-shooting-12/</guid>
      <description>はじめに 前回は、ゲームのタイトルを作って、ゲーム開始と終了を実装しました。今回は、ゲームを面白くする要素として「敵のヒットポイント」と「弾の攻撃力」そして「敵ががダメージを受けた時のエフェクト」と「プレイヤーの無敵エフェクト」を実装します。
実行サンプル(runstant)
敵のHPとプレイヤーの攻撃力の実装 Enemyクラスに敵のHPを実装します。
/** 敵クラス*/phina.define(&amp;#34;Enemy&amp;#34;, {// 継承 superClass: &amp;#39;SpaceShip&amp;#39;,// 初期化 init: function(param) {// 親クラス初期化 this.superInit({ speed: 3 });// フレームアニメーション指定 this.anim.gotoAndPlay(&amp;#39;enemy&amp;#39;);// 当たり判定用矩形 this.collider = Collider({width: 40,height: 40,}).addChildTo(this);// ヒットポイント this.hp = (param &amp;amp;&amp;amp; param.hp !== undefined) ? param.hp : 1;敵のHPはコンストラクタからパラメータで指定できるようにします。
次に、PlayerBulletクラスに弾の攻撃力を実装します。
phina.define(&amp;#34;PlayerBullet&amp;#34;, {// 継 superClass: &amp;#39;Sprite&amp;#39;,// 初期化 init: function() {// 親クラス初期化 this.</description>
    </item>
    
    <item>
      <title>【phina.js】2Dシューティングチュートリアル =第11回 タイトルをつける=</title>
      <link>https://alkn203.github.io/blog/2019/06/28/phina-shooting-11/</link>
      <pubDate>Fri, 28 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2019/06/28/phina-shooting-11/</guid>
      <description>はじめに 前回は、プレイヤーが画面外に出ないように移動に制限をかけました。今回は、タイトル画面を追加します。
独自のタイトル画面の作成 Unityのチュートリアルでは、タイトル文字を非表示にすることでタイトル画面とゲーム画面の区別を行っています。これも一つの手法ですが、今回は、phina.jsで元々用意されているタイトル画面を上書きする方法にします。
TitleSceneの上書き  MainSceneを流用して、TitleSceneと同じ名前で新たにクラスを作ることで、元々のシーンが上書きされます。 コード的にはダブりもありますが、シーン毎に切り離して管理できるのがメリットです。  /** タイトルシーン*/phina.define(&amp;#34;TitleScene&amp;#34;, {// 継承 superClass: &amp;#39;DisplayScene&amp;#39;,// 初期化 init: function() {// 親クラス初期化 this.superInit();// グループ this.bgGroup = DisplayElement().addChildTo(this);this.bg2Group = DisplayElement().addChildTo(this);// グリッド var gx = this.gridX;var gy = this.gridY;// 背景 this.createBackground();// タイトルラベル var title = Label({text: &amp;#39;Shooting Game&amp;#39;,fill: &amp;#39;white&amp;#39;,stroke: &amp;#39;yellow&amp;#39;,fontSize: 72,}).</description>
    </item>
    
    <item>
      <title>【phina.js】2Dシューティングチュートリアル =第10回 プレイヤーの移動制限=</title>
      <link>https://alkn203.github.io/blog/2019/06/27/phina-shooting-10/</link>
      <pubDate>Thu, 27 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2019/06/27/phina-shooting-10/</guid>
      <description>はじめに 前回は、敵の波状攻撃を実装しました。今回は、ゲームにサウンドをつけます。
サウンド素材の読み込み 画像と同じようにアセットとして読み込みます。
// サウンド sound: {&amp;#39;bgm&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/alkn203/phina-shooting-tutorial@master/work/assets/game_maoudamashii_4_vehicle03.mp3&amp;#39;,&amp;#39;shot&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/alkn203/phina-shooting-tutorial@master/work/assets/se_maoudamashii_battle_gun05.mp3&amp;#39;,&amp;#39;explosion&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/alkn203/phina-shooting-tutorial@master/work/assets/se_maoudamashii_explosion06.mp3&amp;#39;,}, サウンド素材は魔王魂から拝借しました。
 BGMをつける  phina.jsでサウンドを扱うには、SoundManagerクラスを使用します。 BGMのようにループするサウンドの場合は、playMusicメソッドを使います。 デフォルトでは、ループする設定になってます。 メインシーンのコンストラクタなど好きな場所に追加して下さい。  // BGM再生 SoundManager.playMusic(&amp;#39;bgm&amp;#39;);プレイヤーにショット音をつける  ショット音は一回毎に再生する必要がありますので、playメソッドを使います。 弾生成と同時に音を再生するようにPlayerBulletクラスのコンストラクに処理を追加しています。  /** プレイヤーの弾クラス*/phina.define(&amp;#34;PlayerBullet&amp;#34;, {// 継 superClass: &amp;#39;Sprite&amp;#39;,// 初期化 init: function() {// 親クラス初期化 this.superInit(&amp;#39;bullet&amp;#39;, 64, 64);// スピード var speed = 10;// 当たり判定用のコライダー this.collider = Collider({width: 10,height: 30,}).</description>
    </item>
    
    <item>
      <title>【phina.js】2Dシューティングチュートリアル =第9回 音をつける=</title>
      <link>https://alkn203.github.io/blog/2019/06/27/phina-shooting-09/</link>
      <pubDate>Thu, 27 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2019/06/27/phina-shooting-09/</guid>
      <description>はじめに 前回は、敵の波状攻撃を実装しました。今回は、ゲームにサウンドをつけます。
サウンド素材の読み込み 画像と同じようにアセットとして読み込みます。
// サウンド sound: {&amp;#39;bgm&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/alkn203/phina-shooting-tutorial@master/work/assets/game_maoudamashii_4_vehicle03.mp3&amp;#39;,&amp;#39;shot&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/alkn203/phina-shooting-tutorial@master/work/assets/se_maoudamashii_battle_gun05.mp3&amp;#39;,&amp;#39;explosion&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/alkn203/phina-shooting-tutorial@master/work/assets/se_maoudamashii_explosion06.mp3&amp;#39;,}, サウンド素材は魔王魂から拝借しました。
 BGMをつける  phina.jsでサウンドを扱うには、SoundManagerクラスを使用します。 BGMのようにループするサウンドの場合は、playMusicメソッドを使います。 デフォルトでは、ループする設定になってます。 メインシーンのコンストラクタなど好きな場所に追加して下さい。  // BGM再生 SoundManager.playMusic(&amp;#39;bgm&amp;#39;);プレイヤーにショット音をつける  ショット音は一回毎に再生する必要がありますので、playメソッドを使います。 弾生成と同時に音を再生するようにPlayerBulletクラスのコンストラクに処理を追加しています。  /** プレイヤーの弾クラス*/phina.define(&amp;#34;PlayerBullet&amp;#34;, {// 継 superClass: &amp;#39;Sprite&amp;#39;,// 初期化 init: function() {// 親クラス初期化 this.superInit(&amp;#39;bullet&amp;#39;, 64, 64);// スピード var speed = 10;// 当たり判定用のコライダー this.collider = Collider({width: 10,height: 30,}).</description>
    </item>
    
    <item>
      <title>【phina.js】2Dシューティングチュートリアル =第8回 敵の波状攻撃=</title>
      <link>https://alkn203.github.io/blog/2019/06/26/phina-shooting-08/</link>
      <pubDate>Wed, 26 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2019/06/26/phina-shooting-08/</guid>
      <description>はじめに 前回は、背景を追加しました。今回は、敵の波状攻撃を実装します。
WaveとEmitter UnityのチュートリアルにあるWave型とEmitterという仕組み自体は、phina.jsにはありませんので、似せた処理を作ります。
Wave機能の実現 UnityのWave型を参考にして、以下の仕様にします。
 敵をフォーメーションで出現させる。 敵が全て倒されるか、画面外に出たら1に戻る。  クラスにしても良いのですが、親子関係の複雑化を避けるために、今回は関数を作ります。
createWave関数 // Wave作成 createWave: function() {// 敵3機フォーメーション [[0, -2], [-2, -4], [2, -4]].each(function(arr) {var enemy = Enemy().addChildTo(this.waveGroup);enemy.setPosition(this.gridX.center(arr[0]), this.gridY.span(arr[1]));}, this);}, これまで敵はenemyGroupに追加してきましたが、新たにwaveGroupに追加します。 敵のフォーメーション情報を配列に入れて、ループでアクセスして敵を配置しています。  checkWave関数 // Waveの状態チェック checkWave: function() {// 敵がいなくなったら出現させる if (this.waveGroup.children.length === 0) {this.createWave();}}, updateでこの関数を呼び出し、敵の状態をチェックします。 全ての敵が画面外に出るか、プレイヤーに倒されたらcreateWaveを呼び出して敵を出現させます。  敵が画面外で弾を撃たないようにする 敵の波状攻撃は実装できましたが、このままだと画面外にいる時から弾を発射できてしまいますので、画面に現れてから弾の発射を開始するように調整します。
// 一定間隔で弾を発射 this.tweener.clear().call(function() {this.</description>
    </item>
    
    <item>
      <title>【phina.js】2Dシューティングチュートリアル =第7回 背景を追加する=</title>
      <link>https://alkn203.github.io/blog/2019/06/25/phina-shooting-07/</link>
      <pubDate>Tue, 25 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2019/06/25/phina-shooting-07/</guid>
      <description>はじめに 前回は、当たり判定を追加しました。今回は、背景を作成します。
背景画像を追加する  背景画像をスプライトとして追加します。画像は2種類にしてスクロール速度を変えて奥行き感を表現します。 背景をループしてスクロールできるように、それぞれ同じ画像を2つ縦に繋げて並べます。画像はグループに追加して管理します。 背景画像は、画面の縦サイズより少し大きめにすることで、スクロールさせる時の画像の移動をより自然に見せることができます。  // グループ this.bgGroup = DisplayElement().addChildTo(this);this.bg2Group = DisplayElement().addChildTo(this);// 背景作成 createBackground: function() {var bgGroup = this.bgGroup;var bg2Group = this.bg2Group;(2).times(function(i) {// 一番下の背景 var bg = Sprite(&amp;#39;bg&amp;#39;).addChildTo(bgGroup);bg.setPosition(this.gridX.center(), this.gridY.center());// 上の背景 var bg2 = Sprite(&amp;#39;bg2&amp;#39;).addChildTo(bg2Group);bg2.setPosition(this.gridX.center(), this.gridY.center());// スクロールスピード bg.physical.velocity.y = 2;bg2.physical.velocity.y = 4;}, this);// それぞれ2つの背景を縦に繋げる bgGroup.children.last.bottom = bgGroup.children.first.top;bg2Group.children.last.bottom = bg2Group.</description>
    </item>
    
    <item>
      <title>【phina.js】2Dシューティングチュートリアル =第6回 当たり判定とアニメーションイベントとグループ=</title>
      <link>https://alkn203.github.io/blog/2019/06/24/phina-shooting-06/</link>
      <pubDate>Mon, 24 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2019/06/24/phina-shooting-06/</guid>
      <description>はじめに 前回は、敵を追加して敵が弾を発射するようにしました。今回は、当たり判定を作成します。
Colliderクラスを作成する Unityでは、コライダーという当たり判定を行うためのコンポーネントが用意されていますが、phina.jsにはありません。そこで、それに似た機能を持たせたColliderというクラスを作りました。
/** コライダークラス*/phina.define(&amp;#34;Collider&amp;#34;, {// 継承 superClass: &amp;#39;RectangleShape&amp;#39;,// 初期化 init: function(param) {// 親クラス初期化 this.superInit({width: param.width,height: param.height,fill: null,stroke: &amp;#39;red&amp;#39;,});},// コライダーの絶対座標の矩形 getAbsoluteRect: function() {var x = this.left + this.parent.x;var y = this.top + this.parent.y;return Rect(x, y, this.width, this.height);},}); 今回は簡易な矩形での当たり判定を行うので、RentangleShapeクラスを継承しています。 コライダーは子要素として追加するため、コライダー自体の座標は相対座標値になることから、親の座標を元に絶対座標値の矩形を計算して返す関数を用意します。  仕様変更 これまでプレイヤーと敵の弾は、空のクラスに一旦追加する形にしていましたが、当たり判定における親子関係を出来るだけシンプルにするために、shot関数の中で直接生成する形に変更しました。
当たり判定を付ける プレイヤー プレイヤークラスでコライダーを以下のように追加します。
/** プレイヤークラス*/phina.</description>
    </item>
    
    <item>
      <title>【phina.js】2Dシューティングチュートリアル =第5回 敵を作成する=</title>
      <link>https://alkn203.github.io/blog/2019/06/23/phina-shooting-05/</link>
      <pubDate>Sun, 23 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2019/06/23/phina-shooting-05/</guid>
      <description>はじめに 前回は、プレイヤーから弾が発射できるようにしました。今回は、敵を作成します。
共通部分のクラス化 前回作ったプレイヤークラスと今回作成する敵クラスでは、共通化できる部分があります。その部分をSpaceShipクラスとして別クラスで作成し、使い回しが出来るようにします。
SpaceShipクラス /** スペースシップクラス*/phina.define(&amp;#34;SpaceShip&amp;#34;, {// 継承 superClass: &amp;#39;Sprite&amp;#39;,// 初期化 init: function(param) {// 親クラス初期化 this.superInit(&amp;#39;spaceship&amp;#39;, 64, 64);// フレームアニメーションをアタッチ this.anim = FrameAnimation(&amp;#39;spaceship&amp;#39;).attachTo(this);// 移動スピード this.speed = param.speed;},// 機体の移動 move: function(direction) {this.moveBy(direction.x * this.speed, direction.y * this.speed);},}); プレイヤークラスと敵クラスがこのクラスを継承できるようにします。 スプライトとフレームアニメーションは、同じファイルを使っていますので共通化できます。 移動スピードは、外から指定出来るようにしています。 移動処理も関数に方向を代入することで処理ができるようにしています。  プレイヤークラスから継承する 設計変更で、プレイヤークラスのコンストラクは以下のようになります。
/** プレイヤークラス*/phina.define(&amp;#34;Player&amp;#34;, {// 継承 superClass: &amp;#39;SpaceShip&amp;#39;,// 初期化 init: function() {// 親クラス初期化 this.</description>
    </item>
    
    <item>
      <title>【phina.js】2Dシューティングチュートリアル =第4回 プレイヤーから弾を撃つ=</title>
      <link>https://alkn203.github.io/blog/2019/06/22/phina-shooting-04/</link>
      <pubDate>Sat, 22 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2019/06/22/phina-shooting-04/</guid>
      <description>はじめに 前回は、プレイヤーをキーボードで移動させるところまで出来ました。 今回は、プレイヤーが自動で弾を連射するようにします。
親子関係  Unityでは、オブジェクトの「親子関係」という言葉を使いますが、phina.jsでも同じような関係を持たせることができます。 親子関係になると、親が移動・回転を行えば、追従して子も同じように移動・回転します。  子要素として追加する方法 例えば、obj1をobj2の子要素として追加したい場合、以下のように書きます。
obj1.addChildTo(obj2);プレイヤーの弾を作成する プレイヤーの弾を表示するだけなら、以下のようにスプライトとしてシーンに追加すればOKです。
// プレイヤーの弾Sprite(&amp;#39;bullet&amp;#39;, 64, 64).addChildTo(this).setPosition(this.gridX.center(), this.gridY.center());ここまでの実行サンプル プレイヤーの弾表示(runstant)
プレイヤーの弾を動かす ゲームを実行したら勝手に上に飛んで行く弾を作成します。
親となるPlayerBulletの作成 Unityのチュートリアルでは空のゲームオブジェクトを作成していますが、phina.jsではDisplayElementというクラスにその役割をさせることができます。
PlayerBulletクラス プレイヤーの弾として、DisplayElementを継承した以下のクラスを作成しました。
/** プレイヤーの弾クラス*/phina.define(&amp;#34;PlayerBullet&amp;#34;, {// 継 superClass: &amp;#39;DisplayElement&amp;#39;,// 初期化 init: function() {// 親クラス初期化 this.superInit();// スピード var speed = 10;var self = this;// 左右の弾 [-10, 10].each(function(dx) {Sprite(&amp;#39;bullet&amp;#39;, 64, 64).addChildTo(self).setPosition(self.x + dx, self.</description>
    </item>
    
    <item>
      <title>【phina.js】2Dシューティングチュートリアル =第3回 プレイヤーの移動=</title>
      <link>https://alkn203.github.io/blog/2019/06/21/phina-shooting-03/</link>
      <pubDate>Fri, 21 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2019/06/21/phina-shooting-03/</guid>
      <description>はじめに 前回は、ゲームで使うアセットの読み込みまで行いました。今回は、プレイヤーをキーボードで操作できるようにします。
プレイヤーの移動 Unityでは、コードを実行する場合、ゲームオブジェクトにスクリプトをアタッチする方法をとりますが、phina.jsでは、オブジェクト専用のクラスを作成する方法が一般的です。
プレイヤークラス 今回は、プレイヤークラスを以下のとおり実装しました。
/** プレイヤークラス*/phina.define(&amp;#34;Player&amp;#34;, {// 継承 superClass: &amp;#39;Sprite&amp;#39;,// 初期化 init: function() {// 親クラス初期化 this.superInit(&amp;#39;spaceship&amp;#39;, 64, 64);// フレームアニメーションをアタッチ FrameAnimation(&amp;#39;spaceship&amp;#39;).attachTo(this).gotoAndPlay(&amp;#39;player&amp;#39;);// 移動スピード this.speed = 5;},// 毎フレーム更新処理 update: function(app) {// 移動する向きを求める var direction = app.keyboard.getKeyDirection();// 移動する向きとスピードを代入する this.moveBy(direction.x * this.speed, direction.y * this.speed);},});クラス宣言 phina.define(&amp;#34;Player&amp;#34;, {// 継承 superClass: &amp;#39;Sprite&amp;#39;, クラス宣言は、defineで行います。次の文字列はクラス名です。 superClassで継承元の親クラスを指定します。自機はスプライト画像を使うので、親クラスにSpriteクラスを指定しています。  init関数 一般的にコンストラクと呼ばれるもので、UnityにおけるStartと同じ役割です。</description>
    </item>
    
    <item>
      <title>【phina.js】2Dシューティングチュートリアル =第2回 スプライトとフレームアニメーション=</title>
      <link>https://alkn203.github.io/blog/2019/06/20/phina-shooting-02/</link>
      <pubDate>Thu, 20 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2019/06/20/phina-shooting-02/</guid>
      <description>はじめに 前回は、phina.jsにおけるコーディングの準備までを書きました。今回から具体的にチュートリアルを進めていきます。
テクスチャからスプライトを作成する Unityでは内臓のスプライトエディタで作成しますが、phina.jsではアセットとして別に用意した画像ファイルを読み込みます。
用意した画像 プレイヤーと敵 プレイヤーと敵の弾 爆発  これらの画像は、一般的にスプライトシートと呼ばれており同じサイズの画像を複数枚タイル状に並べたものです。 一枚当たりのサイズを指定して切り出すことで、好きなコマ画像を表示したり、フレームアニメーションと言われるコマ送りの動画を表現することができます。  自機と敵のアニメーション 以下ようなアニメーションを作成します。
フレームアニメーション定義ファイルの作成  フレームアニメーションは、少ないコマ数であればコード中でフレームインデックスを指定して表現することもできますが、アニメーションの種類が増えると複雑になりがちです phina.jsではフレームアニメーション定義ファイルを作成してアセットとして読み込むことで、簡単にアニメーションを行うことができます。  自機と敵の定義ファイル {&amp;#34;frame&amp;#34;: {&amp;#34;width&amp;#34;: 64,&amp;#34;height&amp;#34;: 64,&amp;#34;cols&amp;#34;: 4,&amp;#34;rows&amp;#34;: 4},&amp;#34;animations&amp;#34; : {&amp;#34;player&amp;#34;: {&amp;#34;frames&amp;#34;: [0,1,2,3,2,1],&amp;#34;next&amp;#34;: &amp;#34;player&amp;#34;,&amp;#34;frequency&amp;#34;: 1},&amp;#34;enemy&amp;#34;: {&amp;#34;frames&amp;#34;: [4,5,6,7,6,5],&amp;#34;next&amp;#34;: &amp;#34;enemy&amp;#34;,&amp;#34;frequency&amp;#34;: 1}}}定義ファイルはjson形式で作成します。
 frameのwidthとheightは、１コマ毎に画像を切り出すサイズで、今回は64x64としています。 colsは横、rowは縦の画像のコマ数で、4x4の合計16コマであることが分かります。 animationsで個別のアニメーションを定義します。 playerはアニメーション名で、任意の名前を設定することができます。 framesで何番目のコマを使うかを配列形式で指定します。自機の画像は4コマ目までなので、今回は0→1→2→3→2→1と順番に切り替えてアニメーションさせます。敵の画像は5から8コマ目なので、同様に指定しています。配列なのでインデックスは0から始まります。 nextで次のアニメーションを指定します。同じアニメーション名を指定すると、ループします。 frequencyはアニメーションの間隔で、小さければ速くなり、大きければ遅くなります。  爆発アニメーションの定義ファイル 以下のようなアニメーションを作成します。
{&amp;#34;frame&amp;#34;: {&amp;#34;width&amp;#34;: 64,&amp;#34;height&amp;#34;: 64,&amp;#34;cols&amp;#34;: 10,&amp;#34;rows&amp;#34;: 1},&amp;#34;animations&amp;#34; : {&amp;#34;explosion&amp;#34;: {&amp;#34;frames&amp;#34;: [0,1,2,3,4,5,6,7,8,9],&amp;#34;frequency&amp;#34;: 1}}}自機と敵の場合と違う点は、animationsのnextを指定していないところです。理由は、爆発アニメーションは1回限りで良いからです。</description>
    </item>
    
    <item>
      <title>【phina.js】2Dシューティングチュートリアル =第1回 プログラミングの準備=</title>
      <link>https://alkn203.github.io/blog/2019/06/19/phina-shooting-01/</link>
      <pubDate>Wed, 19 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2019/06/19/phina-shooting-01/</guid>
      <description>プログラミングの準備 今回のチュートリアルでは、phina.jsの公式オンラインエディタの位置付けであるRunstantを使用します。
ひな形 私が普段使っている以下のひな形から作成します。
// グローバルに展開phina.globalize();/** メインシーン*/phina.define(&amp;#34;MainScene&amp;#34;, {// 継承 superClass: &amp;#39;DisplayScene&amp;#39;,// 初期化 init: function() {// 親クラス初期化 this.superInit();// 背景色 this.backgroundColor = &amp;#39;black&amp;#39;;// 以下にコードを書いていく },// 毎フレーム更新処理 update: function() {// 以下にコードを書いていく  },});/** メイン処理*/phina.main(function() {// アプリケーションを生成 var app = GameApp({// MainScene から開始 startLabel: &amp;#39;main&amp;#39;,});// fps表示 //app.</description>
    </item>
    
  </channel>
</rss>