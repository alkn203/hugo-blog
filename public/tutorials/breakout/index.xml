<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Breakout on Keep On Coding</title>
    <link>https://alkn203.github.io/blog/tutorials/breakout/</link>
    <description>Recent content in Breakout on Keep On Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language><atom:link href="https://alkn203.github.io/blog/tutorials/breakout/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【phina.js】ゲーム作成チュートリアル（ブロック崩し）=最終回 ゲームオーバーとクリア=</title>
      <link>https://alkn203.github.io/blog/2020/10/08/breakout-06/</link>
      <pubDate>Thu, 08 Oct 2020 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2020/10/08/breakout-06/</guid>
      <description>はじめに 前回は、Tweenerを使ったアニメーション処理を追加しました。今回は最終回として、ゲームオーバーとクリア処理を追加したいと思います。
runstantで確認
ゲームオーバー処理 ボールが画面下に落下したら、GAME OVERという文字を表示してタイトル画面に戻るようにします。 コードは以下のとおりです。
// グローバルに展開 phina.globalize(); /* * 定数 */ var BLOCK_WIDTH = 40 * 2; var BLOCK_HEIGHT = 60 / 2; var PADDLE_WIDTH = BLOCK_WIDTH * 1.5; var PADDLE_HEIGHT = BLOCK_HEIGHT; var BALL_RADIUS = BLOCK_WIDTH / 8; /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // コンストラクタ  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // ブロックグループ  this.</description>
    </item>
    
    <item>
      <title>【phina.js】ゲーム作成チュートリアル（ブロック崩し）=第5回 Tweenerアニメーション=</title>
      <link>https://alkn203.github.io/blog/2020/10/04/breakout-05/</link>
      <pubDate>Sun, 04 Oct 2020 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2020/10/04/breakout-05/</guid>
      <description>はじめに 前回は、ブロックの消去処理を追加しました。 今回は、ゲームとしての見栄えを良くするために、ブロックがアニメーションして消えるようにしたいと思います。
runstantで確認
Tweenerを使ったアニメーション処理 phina.jsにはTweenerという機能があり、オブジェクトに対して移動、拡大・縮小、回転などといったアニメーションを簡単に設定することができます。今回は、ブロックが縮小して消えるようにしてみます。
アニメーション用ダミーブロックの作成 ブロックそのものにTweenerを設定しても良いのですが、消去アニメーション中も当たり判定が有効だと予期しない動作を招きかねないので、アニメーション用のダミーブロックを別途作成してから、それにTweenerを設定する方法をとります。 コードは以下のとおりです。
// グローバルに展開 phina.globalize(); /* * 定数 */ var BLOCK_WIDTH = 40 * 2; var BLOCK_HEIGHT = 60 / 2; var PADDLE_WIDTH = BLOCK_WIDTH * 1.5; var PADDLE_HEIGHT = BLOCK_HEIGHT; var BALL_RADIUS = BLOCK_WIDTH / 8; /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // コンストラクタ  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // ブロックグループ  this.</description>
    </item>
    
    <item>
      <title>【phina.js】ゲーム作成チュートリアル（ブロック崩し）=第4回 ボールとブロックの反射=</title>
      <link>https://alkn203.github.io/blog/2020/09/30/breakout-04/</link>
      <pubDate>Wed, 30 Sep 2020 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2020/09/30/breakout-04/</guid>
      <description>はじめに 前回は、ボールと画面端、ボールとパドルの反射処理を実装しました。今回は、ボールとブロックの反射処理、そしてブロックの消去処理を追加したいと思います。
runstantで確認
ボールとブロックの反射処理 ボールがブロックに当たると反射するようにします。まず、反射のパターンを整理したいと思います。 そこで、ボールとブロックとの当たり判定を以下のパターンに分けてみました。
 ブロックの左上角 ・・・左上に跳ね返す ブロックの右上角 ・・・右上に跳ね返す ブロックの左下角 ・・・左下に跳ね返す ブロックの右下角 ・・・右下に跳ね返す ブロックの上面と下面 ・・・縦移動を反転させる ブロックの左側面と右側面 ・・・横移動を反転させる  コードは以下のとおりです。
// グローバルに展開 phina.globalize(); /* * 定数 */ var BLOCK_WIDTH = 40 * 2; var BLOCK_HEIGHT = 60 / 2; var PADDLE_WIDTH = BLOCK_WIDTH * 1.5; var PADDLE_HEIGHT = BLOCK_HEIGHT; var BALL_RADIUS = BLOCK_WIDTH / 8; /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // コンストラクタ  init: function() { // 親クラス初期化  this.</description>
    </item>
    
    <item>
      <title>【phina.js】ゲーム作成チュートリアル（ブロック崩し）=第3回 ボールの作成=</title>
      <link>https://alkn203.github.io/blog/2020/09/20/breakout-03/</link>
      <pubDate>Sun, 20 Sep 2020 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2020/09/20/breakout-03/</guid>
      <description>はじめに 前回は、プレイヤーが操作するパドルを作成しました。今回は、ブロック崩しの肝とも言えるボールを作成したいと思います。
runstantで確認
コードは以下のとおりです。
// グローバルに展開 phina.globalize(); /* * 定数 */ var BLOCK_WIDTH = 40 * 2; var BLOCK_HEIGHT = 60 / 2; var PADDLE_WIDTH = BLOCK_WIDTH * 1.5; var PADDLE_HEIGHT = BLOCK_HEIGHT; var BALL_RADIUS = BLOCK_WIDTH / 8; /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // コンストラクタ  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // ブロックグループ  this.blockGroup = DisplayElement().</description>
    </item>
    
    <item>
      <title>【phina.js】ゲーム作成チュートリアル（ブロック崩し）=第2回 パドルの作成=</title>
      <link>https://alkn203.github.io/blog/2020/09/19/breakout-02/</link>
      <pubDate>Sat, 19 Sep 2020 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2020/09/19/breakout-02/</guid>
      <description>はじめに 前回は、画面上部にブロックを配置しました。今回は、プレイヤーが操作するパドルを作成します。
runstantで確認
定数とPaddleクラスを定義する パドル用の定数を追加して、Paddleクラスをphina.defineで定義します。コードは以下のとおりです。
// グローバルに展開 phina.globalize(); /* * 定数 */ var BLOCK_WIDTH = 40 * 2; var BLOCK_HEIGHT = 60 / 2; var PADDLE_WIDTH = BLOCK_WIDTH * 1.5; var PADDLE_HEIGHT = BLOCK_HEIGHT; /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // コンストラクタ  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // ブロックグループ  this.blockGroup = DisplayElement().addChildTo(this); var self = this; // Gridを利用してブロック設置  Array.</description>
    </item>
    
    <item>
      <title>【phina.js】ゲーム作成チュートリアル（ブロック崩し）=第1回 ブロックの配置=</title>
      <link>https://alkn203.github.io/blog/2020/09/18/breakout-01/</link>
      <pubDate>Fri, 18 Sep 2020 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2020/09/18/breakout-01/</guid>
      <description>目的 このチュートリアルでは、ゲームプログラミングの手軽な題材として有名なブロック崩しをphina.jsで作っていきます。第1回目は、以下のようにブロックを配置します。
runstantで確認
定数とBlockクラスを定義する ゲーム内で使用する定数は通常のvarで、Blockクラスはphina.defineを使って定義します。コードは以下のとおりです。
phina.globalize(); /* * 定数 */ var BLOCK_WIDTH = 40 * 2; var BLOCK_HEIGHT = 60 / 2; /* * メインシーン */ phina.define(&amp;#39;MainScene&amp;#39;, { superClass: &amp;#39;DisplayScene&amp;#39;, // コンストラクタ  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; }, }); /* * ブロッククラス */ phina.define(&amp;#39;Block&amp;#39;, { // 親クラス指定  superClass: &amp;#39;RectangleShape&amp;#39;, // コンストラクタ  init: function() { // 親クラス初期化  this.superInit({ width: BLOCK_WIDTH, height: BLOCK_HEIGHT, }); }, }); /* * メイン処理 */ phina.</description>
    </item>
    
  </channel>
</rss>
