<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Keep On Coding</title>
    <link>https://alkn203.github.io/blog/</link>
    <description>Recent content on Keep On Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 19 Jun 2021 11:59:06 +0900</lastBuildDate><atom:link href="https://alkn203.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>フレームアニメーションの速度を動的に変更する</title>
      <link>https://alkn203.github.io/blog/2021/06/19/change-amimation-speed/</link>
      <pubDate>Sat, 19 Jun 2021 11:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/19/change-amimation-speed/</guid>
      <description>フレームアニメーション設定の変更 外部ファイルとして読み込まれたフレームアニメーション設定を後から変更する方法について説明します。例として、フレームアニメーションの速度を変更します。
フレームアニメーション設定を外部ファイルに定義 フレームアニメーション設定は外部ファイルとして定義して、アセットとして読み込むことができます。
// アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/images/tomapiko_ss.png&amp;#39;, }, // フレームアニメーション情報  spritesheet: { &amp;#39;tomapiko_ss&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/tmss/tomapiko.tmss&amp;#39;, }, }; アニメーションのfreaquencyプロパティ  anim を FrameAnimation クラスのインスタンスとした場合、ss で SpriteSheet を参照することができます。 getAnimationで指定したアニメーションを参照することができるので、そのプロパティfreaquencyの値を変更します。  // アニメーション速度変更 anim.ss.getAnimation(&amp;#39;left&amp;#39;).frequency += 1; 以下のサンプルでは、画面をタッチするとフレームアニメーションの速度が遅くなっていきます。
サンプルコード  コードを見る // グローバルに展開 phina.globalize(); // アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/images/tomapiko_ss.png&amp;#39;, }, // フレームアニメーション情報  spritesheet: { &amp;#39;tomapiko_ss&amp;#39;: &amp;#39;https://cdn.</description>
    </item>
    
    <item>
      <title>フレームアニメーションしながら移動させる</title>
      <link>https://alkn203.github.io/blog/2021/06/19/frameamimation-move/</link>
      <pubDate>Sat, 19 Jun 2021 11:58:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/19/frameamimation-move/</guid>
      <description>Sprite画像をフレームアニメーションしたまま移動させます。
update関数に移動処理を記述する フレームアニメーションは自動で管理されていますので、単にupdate関数内に移動処理を書くだけで移動させることができます。
// スプライト画像作成 var sprite = Sprite(&amp;#39;tomapiko&amp;#39;, 64, 64).addChildTo(this); sprite.setPosition(600, 480); // スプライトにフレームアニメーションをアタッチ var anim = FrameAnimation(&amp;#39;tomapiko_ss&amp;#39;).attachTo(sprite); // アニメーションを指定する anim.gotoAndPlay(&amp;#39;walk&amp;#39;); // 更新 sprite.update = function() { // 移動処理  sprite.x -= 2; }; サンプルコード  コードを見る // グローバルに展開 phina.globalize(); // アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/images/tomapiko_ss.png&amp;#39;, }, // スプライトシート  spritesheet: { &amp;#34;tomapiko_ss&amp;#34;: { // フレーム情報  &amp;#34;frame&amp;#34;: { &amp;#34;width&amp;#34;: 64, // 1フレームの画像サイズ（横）  &amp;#34;height&amp;#34;: 64, // 1フレームの画像サイズ（縦）  &amp;#34;cols&amp;#34;: 6, // フレーム数（横）  &amp;#34;rows&amp;#34;: 3, // フレーム数（縦）  }, // アニメーション情報  &amp;#34;animations&amp;#34; : { &amp;#34;walk&amp;#34;: { // アニメーション名  &amp;#34;frames&amp;#34;: [12,13,14], // フレーム番号範囲  &amp;#34;next&amp;#34;: &amp;#34;walk&amp;#34;, // 次のアニメーション  &amp;#34;frequency&amp;#34;: 6, // アニメーション間隔  }, } }, } }; /* * メインシーン */ phina.</description>
    </item>
    
    <item>
      <title>フレームアニメーションを設定する</title>
      <link>https://alkn203.github.io/blog/2021/06/19/frameamimation/</link>
      <pubDate>Sat, 19 Jun 2021 11:58:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/19/frameamimation/</guid>
      <description>Sprite画像でフレームアニメーションを設定します。
スプライトシート画像を用意する スプライトシート画像とは、以下のようにアニメーション用のコマをシートの様に並べた画像です。
 上の画像だと、横6x縦3の計18コマから成り立っています。 ゲーム作成ではコマのことをフレームと呼ぶことが多いです。  スプライトシート画像を読み込む 通常の画像と同じようにASSETSとして読み込みます。
// アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/images/tomapiko_ss.png&amp;#39;, }, }; フレームアニメーション情報を読み込む  フレームアニメーション情報が定義されたjson形式のファイルを読み込む方法が一般的ですが、今回はファイルからではなくASEETSとして、コード内に定義しています。 コード内に記述して十分に動作確認した後に、外部jsonファイルに保存してアセットとして読み込む方が、開発する上では効率的です。  // アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/images/tomapiko_ss.png&amp;#39;, }, // スプライトシート  spritesheet: { &amp;#34;tomapiko_ss&amp;#34;: { // フレーム情報  &amp;#34;frame&amp;#34;: { &amp;#34;width&amp;#34;: 64, // 1フレームの画像サイズ（横）  &amp;#34;height&amp;#34;: 64, // 1フレームの画像サイズ（縦）  &amp;#34;cols&amp;#34;: 6, // フレーム数（横）  &amp;#34;rows&amp;#34;: 3, // フレーム数（縦）  }, // アニメーション情報  &amp;#34;animations&amp;#34; : { &amp;#34;walk&amp;#34;: { // アニメーション名  &amp;#34;frames&amp;#34;: [12,13,14], // フレーム番号範囲  &amp;#34;next&amp;#34;: &amp;#34;walk&amp;#34;, // 次のアニメーション  &amp;#34;frequency&amp;#34;: 6, // アニメーション間隔  }, } }, } };  framesにアニメーションに使いたいフレーム番号の範囲を書きます。 0から始まることに注意してください。 nextに次のアニメーションを指定します。同じ名前にするとループします。 frequencyでアニメーションの間隔を指定します。小さくすれば速くなり、大きくすれば遅くなります。  スプライトシート画像の作成 スプライトシート画像は、通常の画像と同じくSpriteクラスを使って作成しますが、アセット名の次の引数で１フレームの画像サイズを指定します。</description>
    </item>
    
    <item>
      <title>Spriteの向きを反転させる</title>
      <link>https://alkn203.github.io/blog/2021/06/19/reverse_sprite/</link>
      <pubDate>Sat, 19 Jun 2021 11:57:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/19/reverse_sprite/</guid>
      <description>Spriteの向きは、専用の画像を使用せずに反転することができます。
Spriteの向き反転  横方向に反転したい場合は、プロパティscaleXに-1を乗じます。 縦方向に反転したい場合は、プロパティscaleYに-1を乗じます。  以下のコードは、画面タッチでスプライトを反転表示させる例です。
// 画面タッチ時処理 this.onpointstart = function() { // 横向き反転  sprite.scaleX *= -1; }; サンプルコード  コードを見る // グローバルに展開 phina.globalize(); // アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/images/tomapiko.png&amp;#39;, }, }; /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;skyblue&amp;#39;; // スプライト画像作成  var sprite = Sprite(&amp;#39;tomapiko&amp;#39;, 64, 64).</description>
    </item>
    
    <item>
      <title>Spriteを透明にする</title>
      <link>https://alkn203.github.io/blog/2021/06/19/alpha_sprite/</link>
      <pubDate>Sat, 19 Jun 2021 11:56:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/19/alpha_sprite/</guid>
      <description>Sprite は、Shape と同じ基底クラスを継承していますので、共通のプロパティやメソッドを使用することができます。
Spriteの透明度 Shapeと同じくalphaプロパティに指定します。 以下は、スプライトを徐々に透明する処理です。
// 透明度変化アニメーション sp = Sprite(&amp;#39;tomapiko&amp;#39;).addChildTo(this).setPosition(320, 480); sp.update = function() { // 徐々に透明にする  sp.alpha -= 0.01; }; サンプルコード  コードを見る // グローバルに展開 phina.globalize(); // アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/images/tomapiko.png&amp;#39;, }, }; /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;skyblue&amp;#39;; // 透明度変化アニメーション  sp = Sprite(&amp;#39;tomapiko&amp;#39;).</description>
    </item>
    
    <item>
      <title>Spriteを拡大・縮小させる</title>
      <link>https://alkn203.github.io/blog/2021/06/19/scale_sprite/</link>
      <pubDate>Sat, 19 Jun 2021 11:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/19/scale_sprite/</guid>
      <description>Sprite は、Shape と同じ基底クラスを継承していますので、共通のプロパティやメソッドを使用することができます。
Spriteの拡大縮小 // 拡大・縮小 var sp4 = Sprite(&amp;#39;tomapiko&amp;#39;).addChildTo(this).setPosition(200, 800); sp4.scaleY = 1.5; // setScale Sprite(&amp;#39;tomapiko&amp;#39;).addChildTo(this).setPosition(440, 800).setScale(0.5, 0.5); サンプルコード  コードを見る // グローバルに展開 phina.globalize(); // アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/images/tomapiko.png&amp;#39;, }, }; /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;skyblue&amp;#39;; // 拡大・縮小  var sp4 = Sprite(&amp;#39;tomapiko&amp;#39;).</description>
    </item>
    
    <item>
      <title>Spriteを回転させる</title>
      <link>https://alkn203.github.io/blog/2021/06/19/rotate_sprite/</link>
      <pubDate>Sat, 19 Jun 2021 10:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/19/rotate_sprite/</guid>
      <description>Sprite は、Shape と同じ基底クラスを継承していますので、共通のプロパティやメソッドを使用することができます。
Spriteの回転 // 回転 var sp2 = Sprite(&amp;#39;tomapiko&amp;#39;).addChildTo(this).setPosition(320, 600); sp2.rotation = 45; // setRotation Sprite(&amp;#39;tomapiko&amp;#39;).addChildTo(this).setPosition(320, 700).setRotation(15); // 回転アニメーション sp3 = Sprite(&amp;#39;tomapiko&amp;#39;).addChildTo(this).setPosition(320, 800); sp3.update = function() { sp3.rotation++; }; サンプルコード  コードを見る // グローバルに展開 phina.globalize(); // アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/images/tomapiko.png&amp;#39;, }, }; /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.</description>
    </item>
    
    <item>
      <title>Spriteのサイズを指定する</title>
      <link>https://alkn203.github.io/blog/2021/06/19/resize_sprite/</link>
      <pubDate>Sat, 19 Jun 2021 09:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/19/resize_sprite/</guid>
      <description>Sprite は、Shape と同じ基底クラスを継承していますので、共通のプロパティやメソッドを使用することができます。
Spriteのサイズ指定 // サイズ指定 var sp1 = Sprite(&amp;#39;tomapiko&amp;#39;).addChildTo(this).setPosition(320, 340); sp1.width = 128; // 一括指定 Sprite(&amp;#39;tomapiko&amp;#39;).addChildTo(this).setPosition(320, 480).setSize(128, 128); サンプルコード  コードを見る // グローバルに展開 phina.globalize(); // アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/images/tomapiko.png&amp;#39;, }, }; /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;skyblue&amp;#39;; // サイズ指定  var sp1 = Sprite(&amp;#39;tomapiko&amp;#39;).</description>
    </item>
    
    <item>
      <title>Spriteを表示して位置を指定する</title>
      <link>https://alkn203.github.io/blog/2021/06/18/locate_sprite/</link>
      <pubDate>Fri, 18 Jun 2021 23:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/18/locate_sprite/</guid>
      <description>Spriteをシーンに表示する ゲーム作りで定番のスプライト画像を画面に表示します。
アセットの定義 スプライトを表示するためには、アセットとして読み込む画像等を以下のように定義する必要があります。
// アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/images/tomapiko.png&amp;#39;, }, };  imageはアセットの種類です。 連想配列の左側にキー名、右側に使用するアセットの場所を書きます。  アセットの読み込み 読み込むためには、main 関数のGameAppのコンストラクタのプロパティassetsに定義したアセットを引き渡します。
phina.main(function() { // アプリケーションを生成  var app = GameApp({ // MainScene から開始  startLabel: &amp;#39;main&amp;#39;, // アセット読み込み  assets: ASSETS, }); // fps表示  //app.enableStats();  // 実行  app.run(); }); Spriteの位置指定 Shapeの位置指定と同様に行うことができます。
// Sprite  Sprite(&amp;#39;tomapiko&amp;#39;).addChildTo(this).setPosition(320, 480); サンプルコード  コードを見る // グローバルに展開 phina.globalize(); // アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.</description>
    </item>
    
    <item>
      <title>Shapeの種類について知る</title>
      <link>https://alkn203.github.io/blog/2021/06/18/sort-of-shape/</link>
      <pubDate>Fri, 18 Jun 2021 21:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/18/sort-of-shape/</guid>
      <description>Shapeの種類 phina.jsには、以下の種類のShapeが予め用意されています。
RectangleShape 矩形のShapeです。
   プロパティ 説明     fill 塗りつぶし色   stroke 縁取り線色   strokeWidth 縁取り線の太さ   cornerRadius 角丸め値    // RectangleShape RectangleShape({ width: 128, height: 128, fill: &amp;#39;red&amp;#39;, stroke: &amp;#39;lime&amp;#39;, strokeWidth: 16, cornerRadius: 16 }).addChildTo(this).setPosition(320, 200); CircleShape 円形のShapeです。
   プロパティ 説明     fill 塗りつぶし色   stroke 縁取り線色   strokeWidth 縁取り線の太さ   radius 半径    // CircleShape CircleShape({ fill: &amp;#39;green&amp;#39;, stroke: &amp;#39;white&amp;#39;, strokeWidth: 16, radius: 64 }).</description>
    </item>
    
    <item>
      <title>Shapeを移動させる</title>
      <link>https://alkn203.github.io/blog/2021/06/18/move-shape/</link>
      <pubDate>Fri, 18 Jun 2021 21:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/18/move-shape/</guid>
      <description>Shapeの移動 Shape を始めとしたオブジェクトの移動は、オブジェクトのupdate関数で位置を変更させるのが一般的です。
update関数で位置を変更する update 関数は毎フレーム呼ばれるので、関数内で以下のように記述することで Shape を移動させることができます。
// 移動 shape.update = function() { shape.x += 2; shape.y += 2; }; moveBy関数を使った移動 オブジェクトに用意されているmoveBy関数を使って移動させることもできます。
// 移動 shape.update = function() { shape.moveBy(-2, -2); }; サンプルコード  コードを見る // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // Shapeを作成してシーンに追加  var shape = Shape().</description>
    </item>
    
    <item>
      <title>Shapeの原点を変更する</title>
      <link>https://alkn203.github.io/blog/2021/06/18/change-shape-origin/</link>
      <pubDate>Fri, 18 Jun 2021 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/18/change-shape-origin/</guid>
      <description>Shapeの原点 phina.jsでは、Shapeを始めとしたオブジェクトの原点はオブジェクトの中心となっており、配置や回転処理などではこの原点が基準となります。 この原点は変更することができます。
原点の位置と変更 オブジェクトの原点はsetOriginで指定でき、位置関係は以下のようになっています。
   指定値 位置     (0.5, 0.5) 中心（デフォルト）   (0, 0) 左上   (0, 1) 左下   (1, 0) 右上   (1, 1) 右下    例えばShapeの原点を左上にしたい場合、以下のようにします。
shape.setOrigin(0, 0); サンプルコード  コードを見る // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.</description>
    </item>
    
    <item>
      <title>Shapeを透明・非表示にする</title>
      <link>https://alkn203.github.io/blog/2021/06/16/alpha-shape/</link>
      <pubDate>Wed, 16 Jun 2021 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/16/alpha-shape/</guid>
      <description>Shapeの透明度指定 alphaプロパティ Shapeの透明度はalphaプロパティで指定します。デフォルトが1.0で、小さくなるほど透明度が増し、 0で完全に透明になります。
var shape = Shape().addChildTo(this).setPosition(320, 480); shape.alpha = 0.25; Shapeの非表示 hideメソッド hideメソッドでShapeを非表示にすることができます。
var shape = Shape().addChildTo(this).setPosition(320, 480); shape.hide(); 透明の場合は、処理上も描画の対象で当たり判定があるのに対し、非表示の場合は、そもそも描画の対象とはならないという違いがあります。
サンプルコード  コードを見る // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // 透明度  var shape3 = Shape().addChildTo(this).setPosition(320, 600); shape3.alpha = 0.25; // 非表示  var shape4 = Shape().</description>
    </item>
    
    <item>
      <title>Shapeの背景色を指定する</title>
      <link>https://alkn203.github.io/blog/2021/06/16/color-shape/</link>
      <pubDate>Wed, 16 Jun 2021 19:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/16/color-shape/</guid>
      <description>Shapeの背景色指定 Shapeの背景色はbackgroundColorプロパティで指定します。 CSSと同じ感覚で指定できます。
文字列で指定 shape.backgroundColor = &amp;#39;red&amp;#39;; 16進数で指定 shape.backgroundColor = &amp;#39;#ffff00&amp;#39;; RGB値で指定 shape.backgroundColor = `rgb(0, 255, 255)`; hsl値で指定 shape.backgroundColor = `hsl(300, 75%, 50%)`; サンプルコード  コードを見る /// グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // 背景色（文字列）  var shape = Shape().addChildTo(this).setPosition(320, 480); shape.backgroundColor = &amp;#39;red&amp;#39;; // 背景色（RGB値）  var shape1 = Shape().</description>
    </item>
    
    <item>
      <title>Shapeを拡大・縮小させる</title>
      <link>https://alkn203.github.io/blog/2021/06/15/scale-shape/</link>
      <pubDate>Tue, 15 Jun 2021 22:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/15/scale-shape/</guid>
      <description>Shapeの拡大縮小 Shapeの拡大縮小には複数の方法があります。どちらの場合も 1.0を基準として、小さければ縮小、大きければ拡大になります。
scaleX scaleY プロパティに直接指定 var shape = Shape().addChildTo(this).setPosition(320, 480); // 横方向に拡大 shape.scaleX = 1.5; setScale関数で指定 setScale関数を使うと、縦横の拡大縮小をまとめて指定できます。また、生成から一気にチェインメソッドで繋げて書くことができます。
var shape = Shape().addChildTo(this).setPosition(320, 480).setScale(0.5, 0.5); サイズ変更と拡大・縮小の違いは、実際のサイズが変更されるかどうかです。拡大・縮小は見た目は変わっても実際のサイズは変更されませんので、当たり判定の時などに注意が必要です。
サンプルコード // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // 拡大  var shape8 = Shape().addChildTo(this).setPosition(150, 860); shape8.scaleX = 1.5; // 縮小  var shape9 = Shape().</description>
    </item>
    
    <item>
      <title>Shapeを回転させる</title>
      <link>https://alkn203.github.io/blog/2021/06/15/rotate-shape/</link>
      <pubDate>Tue, 15 Jun 2021 21:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/15/rotate-shape/</guid>
      <description>Shapeの回転 Shapeの回転角度指定には複数の方法があります。どちらの場合も 度=degreeで指定します。
rotaitionプロパティに直接指定 // Shapeを作成してシーンに追加 var shape = Shape().addChildTo(this).setPosition(320, 480); // 回転指定 shape.rotation = 45; setRotation関数で指定 setRotation関数を使うと、生成から一気にチェインメソッドで繋げて書くことができます。
var shape = Shape().addChildTo(this).setPosition(320, 600).setRotation(15); Shapeのコンストラクタで指定 位置などと一緒にコンストラクタでも指定できます。
var shape = Shape({ x: 320, y: 720, rotation: 60 }).addChildTo(this); 回転アニメーション Shapeのupdate関数でプロパティrotationの値を変更することで、回転アニメーションをさせることができます。
// スプライト回転 shape.update = function() { shape.rotation++; }; サンプルコード // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.</description>
    </item>
    
    <item>
      <title>Shapeのサイズを指定する</title>
      <link>https://alkn203.github.io/blog/2021/06/13/resize-shape/</link>
      <pubDate>Sun, 13 Jun 2021 21:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/13/resize-shape/</guid>
      <description>Shapeのサイズ指定 Shapeのサイズ指定には複数の方法があります。
幅指定 幅はwidthプロパティで指定します。
shape.width = 128; 高さ指定 高さはheightプロパティで指定します。
shape.height = 128; 幅・高さを一括指定 setSize関数を使えば、幅と高さを一括で指定できます。
shape.setSize(128, 256); コンストラクタ内で指定 位置指定と同じくコンストラクタ内で幅・高さを指定することも可能です。
var shape = Shape({ // 位置・幅・高さ指定  x: 320, y: 480, width: 128, height: 256, }).addChildTo(this); サンプルコード // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // 幅  var shape = Shape().</description>
    </item>
    
    <item>
      <title>Shapeの位置を指定する</title>
      <link>https://alkn203.github.io/blog/2021/06/13/locate-shape/</link>
      <pubDate>Sun, 13 Jun 2021 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/13/locate-shape/</guid>
      <description>Shapeの位置指定 Shapeの位置指定には複数の方法があります。
x,yプロパティに直接指定 // Shapeを作成してシーンに追加 var shape = Shape().addChildTo(this); // 位置指定 shape.x = 320; shape.y = 480; setPosition関数で一括指定 setPosition 関数を使えば、 x, y の値を一括で指定することができ、生成から一気にチェインメソッドで繋げて書くこともできるので便利です。
var shape = Shape().addChildTo(this).setPosition(320, 480); Shapeのコンストラクタで指定 var shape = Shape({ x: 320, y: 480 }).addChildTo(this) 移動量で指定 moveBy関数を使えば、x, yの移動量で位置を変更することができます。
shape.setPosition(320, 480).moveBy(100, 200); ベクトル値の加算で指定 Vector2クラスを使ってベクトル値の加算で位置指定する方法もあります。
var v = Vector2(100, 200); shape.position.add(v); サンプルコード // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.</description>
    </item>
    
    <item>
      <title>Shapeをシーンに表示する</title>
      <link>https://alkn203.github.io/blog/2021/06/12/add-shape/</link>
      <pubDate>Sat, 12 Jun 2021 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/12/add-shape/</guid>
      <description>Shapeをシーンに表示する phina.jsのオブジェクトの基本形であるShapeを画面に表示します。
var shape = Shape().addChildTo(this);  Shapeクラスのコンストラクタで生成します。コンストラクタの前にnewをつける必要はありません。 addChildTo(this) で現在の Scene に追加します。this は MainScene を指しています。 位置が指定されていない時は、画面左上(0,0)に表示されます。 変数に代入しなくても表示されますが、後にプロパティを操作することが多いので、とりあえずは変数に代入しておいた方が良いでしょう。 使用頻度は低いですがthis.addChild(shape)と書くこともできます。  サンプルコード // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // Shapeを作成してシーンに追加  var shape = Shape().addChildTo(this); }, }); /* * メイン処理 */ phina.main(function() { // アプリケーションを生成  var app = GameApp({ // MainScene から開始  startLabel: &amp;#39;main&amp;#39;, }); // fps表示  //app.</description>
    </item>
    
    <item>
      <title>はじめに</title>
      <link>https://alkn203.github.io/blog/2021/06/12/prologue/</link>
      <pubDate>Sat, 12 Jun 2021 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/12/prologue/</guid>
      <description>phina.jsについて 自分なりにphina.jsについて書いたエントリーです。
phina.js事始め【改】
phina.jsの開発環境を構築する  このTips集では、Webブラウザ上でコーディング・実行が可能なrunstantを使用してますので、基本的に開発環境として必要なものはWebブラウザだけです。 自分の好きなエディタを使ってローカルで開発することも可能ですが、クライアントサイドで実行されるjavascriptは、セキュリティ上の理由からローカルファイルへのアクセスが制限されています。 対応策としては、Visual Studio Codeなどのエディタの拡張機能にあるローカルサーバーを使う方法があります。  phina.jsを読み込む runstantのView(html) タブのコードは以下のようになっています。
&amp;lt;!doctype html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, user-scalable=no&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;apple-mobile-web-app-capable&amp;#34; content=&amp;#34;yes&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;${title}&amp;lt;/title&amp;gt; &amp;lt;meta name=&amp;#34;description&amp;#34; content=&amp;#34;${description}&amp;#34; /&amp;gt; &amp;lt;style&amp;gt;${style}&amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/gh/phinajs/phina.js@v0.2.3/build/phina.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;${script}&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  script タグで上記のように読み込みます。rawgit はサービスが終了したので、CDN として jsdeliver を使用しています。 phina.jsのバージョンは現在0.2.3が最新ですので、特段の事情がない限りは最新版を使用することを強くおすすめします。  </description>
    </item>
    
    <item>
      <title>phina.js事始め【改】</title>
      <link>https://alkn203.github.io/blog/2021/06/11/start-guide/</link>
      <pubDate>Fri, 11 Jun 2021 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/11/start-guide/</guid>
      <description>ロゴはphinajs.comから借用
はじめに これまでphina.jsに関するいくつかの記事を投稿していますが、phina.js自体について書いていなかったので、ここで簡単に紹介したいと思います。
phina.jsについて 趣味でプログラミングをしている私が日々楽しんで使っている国産のjavascriptゲームライブラリです。以前からjavascriptでゲーム開発をしている方は知っているかもしれませんが、tmlib.js の後継ライブラリになります。とりあえずどのようなものか知りたい方には、以下の紹介記事が参考になるかと思います。
 本日 JavaScript ゲームライブラリ『phina.js』をリリースしました! by phi さん phina.js - JavaScriptで楽しく簡単にゲームが作れるライブラリ by simiraaaa さん はじめてのphina.js – JavaScriptゲームライブラリを使ってみた！ by 株式会社LIG さん  phina.jsで作ることができるゲーム 端的に言うと、現時点では2Dゲーム ならジャンル問わず（やる気さえあれば）大抵のものを作ることが出来ると思います。実際に作られたゲームを見てみたいという方は、以下のサイトがおすすめです。
  かちゃコム by utyo さん phina.jsで作られた様々なミニゲームがあります。どれも良く出来ていて熱中してしまいます。
  Quest for the Tanelorn by minimo さん スーパーファミコン時代を彷彿させる2Dアクションゲームです。作り込みのレベルが高いです。
  気に入っているところ 以下は個人の主観ですが、他のユーザーも少なからず感じているのではないかと思います。
同じ処理でも少ないコード量でコーディングできる 全てのゲームライブラリと比較したわけではありませんが、phina.js で書き慣れると、個人的には同様の処理を行う他のライブラリのコードが冗長に感じるようになりました。
ソースが読みやすい phina.jsのソースの書き方を真似ることで、結果的に自分のコードも読みやすくなりました。
実行確認までのステップが短い Web上でコーディングできるrunstantを使うことで、簡単に自分のプログラムの実行結果が確認できます。
配列やベクトルなどのコーディングする上でベースとなるクラスの機能拡張が充実している これまでzennで書いた記事でも触れていますが、コーディングする上で細かな配慮がされた仕様になっています。
とにかく使ってみたい方へ   Githubのリポジトリに導入方法が記載されていますが、開発者向けの内容に近いので、その辺り不慣れな方には少し敷居が高く感じられるかもしれません。
  一番簡単な方法は、runstant へのユーザー登録が必要ですが、runstantに用意されたテンプレートをForkすることです。
  javascriptで作られていますので、Webブラウザと自分の好きなエディタさえあれば、複雑な環境構築の必要もなくゲーム開発を始めることができます。</description>
    </item>
    
    <item>
      <title>このブログについて</title>
      <link>https://alkn203.github.io/blog/about/</link>
      <pubDate>Sun, 16 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/about/</guid>
      <description>このブログについて 当ブログは、趣味でプログラミングをしている管理人がjavascriptのゲームライブラリphina.jsに関するTipsなどを通して、ゲームプログラミングの楽しさを伝えることを目的としています。
掲載されているコードについて 当ブログの記事に掲載されているコードはの取り扱いについては、個別に記述がない限り、特に使用制限はありません。記事中にリンクしているrunstantプロジェクトについても同様です。 当ブログに掲載されているコードをご自身のブログなどで引用された場合は、当ブログへリンクをして頂ければ嬉しいです。
免責事項 当ブログに掲載された内容および当ブログからのリンク先への移動によって発生した損害等の一切の責任は、当ブログでは負いかねますので、ご了承ください。
改訂履歴 2019年6月18日　作成</description>
    </item>
    
  </channel>
</rss>
