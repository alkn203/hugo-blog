<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Event on Keep On Coding</title>
    <link>https://alkn203.github.io/blog/tips/event/</link>
    <description>Recent content in Event on Keep On Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language><atom:link href="https://alkn203.github.io/blog/tips/event/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>特定の種類のイベントを全て削除する</title>
      <link>https://alkn203.github.io/blog/2021/06/24/remove-event-all/</link>
      <pubDate>Thu, 24 Jun 2021 17:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/24/remove-event-all/</guid>
      <description>clear メソッド 特定のイベントの登録を全て削除するには、以下のようにclearを使います。
shape.clear(&amp;#39;enterframe&amp;#39;); }); 以下の例では、enterframe イベントを2つ登録しており、タッチするとそれが削除されるようにしています。結果として、shape のサイズ拡大が止まります。
// 更新イベント登録 shape.on(&amp;#39;enterframe&amp;#39;, function() { shape.width++; }); // 更新イベント更新登録 shape.on(&amp;#39;enterframe&amp;#39;, function() { shape.height++; }); // タッチイベント登録 shape.on(&amp;#39;pointstart&amp;#39;, function() { // 特定の種類のイベント登録を全て削除する  shape.clear(&amp;#39;enterframe&amp;#39;); }); サンプルコード  コードを見る // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // Shapeを作成してシーンに追加・位置指定  var shape = Shape().</description>
    </item>
    
    <item>
      <title>一度だけ発行されるイベントを登録する</title>
      <link>https://alkn203.github.io/blog/2021/06/24/only-once-event/</link>
      <pubDate>Thu, 24 Jun 2021 16:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/24/only-once-event/</guid>
      <description>one メソッド １回だけ発行するイベントは、oneを使って登録すると便利です。
// タッチ関数（一度のみ実行） shape.one(&amp;#39;pointstart&amp;#39;, function() { alert(&amp;#34;タッチされました&amp;#34;); }); 実行すると、タッチイベントが1回だけしか発生しないのが分かります。
サンプルコード  コードを見る // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // Shapeを作成してシーンに追加・位置指定  var shape = Shape().addChildTo(this).setPosition(320, 480); // 背景色設定  shape.backgroundColor = &amp;#39;red&amp;#39;; // タッチ可能にする  shape.setInteractive(true); // タッチ関数（一度のみ実行）  shape.one(&amp;#39;pointstart&amp;#39;, function() { alert(&amp;#34;タッチされました&amp;#34;); }); }, }); /* * メイン処理 */ phina.</description>
    </item>
    
    <item>
      <title>登録したイベントを削除する</title>
      <link>https://alkn203.github.io/blog/2021/06/24/remove-event/</link>
      <pubDate>Thu, 24 Jun 2021 15:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/24/remove-event/</guid>
      <description>イベントの削除 イベントを削除するためには、off メソッドを使います。
// タッチ関数 var touchFunc = function() { alert(&amp;#34;タッチされました&amp;#34;); // 2度と呼ばないよう解除する  shape.off(&amp;#34;pointstart&amp;#34;, touchFunc); }; // タッチ開始時に呼ばれる関数を登録 shape.on(&amp;#39;pointstart&amp;#39;, touchFunc); };  offでは第2引数に関数を指定する必要があるため、 touchFuncとして別に定義しています。 実行すると、タッチイベントが1回だけしか発生しないのが分かります。  サンプルコード  コードを見る // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // Shapeを作成してシーンに追加・位置指定  var shape = Shape().addChildTo(this).setPosition(320, 480); // 背景色設定  shape.</description>
    </item>
    
    <item>
      <title>独自のイベントを登録・発行する</title>
      <link>https://alkn203.github.io/blog/2021/06/24/original-event/</link>
      <pubDate>Thu, 24 Jun 2021 14:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/24/original-event/</guid>
      <description>独自イベントの登録 Shapeに対して独自のイベントを登録・発行する方法についてします。
on + イベント名  オブジェクトに独自イベントを登録するためには、on + イベント名 の関数をオブジェクトに実装します。 今回はイベント名をhitとしたいのでonhitとしました。  // hitイベント登録 shape.onhit = function() { alert(&amp;#39;Hit!&amp;#39;); }; 独自イベント発行 イベントの発行は、flare(イベント名)で行います。
// タッチイベント登録 shape.onpointstart = function() { // hitイベント発行  shape.flare(&amp;#39;hit&amp;#39;); }; サンプルコード  コードを見る // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // Shapeを作成してシーンに追加・位置指定  var shape = Shape().</description>
    </item>
    
    <item>
      <title>タッチイベントの種類を理解する</title>
      <link>https://alkn203.github.io/blog/2021/06/24/touch-type/</link>
      <pubDate>Thu, 24 Jun 2021 13:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/24/touch-type/</guid>
      <description>タッチイベントの種類 phina.jsには、以下のタッチイベントが用意されています。
onpointstart タッチされたタイミングで発動します。
onpointend タッチが離れたタイミングで発動します。
onpointmove タッチされたまま動いている時に発動します。
onpointstay  タッチされたまま動かない時に発動します。 現在の仕様では、タッチ移動時にも発動します。  サンプルコード  コードを見る // グローバルに展開 phina.globalize(); var LABEL_COLOR = &amp;#39;yellow&amp;#39;; /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; var label1 = Label({ text: &amp;#39;&amp;#39;, fill: LABEL_COLOR, }).addChildTo(this).setPosition(320, 480); var label2 = Label({ text: &amp;#39;&amp;#39;, fill: LABEL_COLOR, }).addChildTo(this).setPosition(320, 600); var label3 = Label({ text: &amp;#39;&amp;#39;, fill: LABEL_COLOR, }).</description>
    </item>
    
    <item>
      <title>タッチされた座標を調べる</title>
      <link>https://alkn203.github.io/blog/2021/06/24/touch-point/</link>
      <pubDate>Thu, 24 Jun 2021 12:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/24/touch-point/</guid>
      <description>タッチされた座標を調べる  タッチされた座標を調べるためには、イベント関数の引数を利用します。 pointerプロパティにタッチに関する情報が入っていますので、それを利用します。  // シーンにタッチイベント登録 this.onpointstart = function(e) { // タッチされた座標を調べる  var tx = e.pointer.x; var ty = e.pointer.y; // タッチされた座標にShapeを移動  shape.setPosition(tx, ty); }; サンプルコード  コードを見る // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // Shapeを作成してシーンに追加  var shape = Shape().addChildTo(this).setPosition(320, 480); // シーンにタッチイベント登録  this.</description>
    </item>
    
    <item>
      <title>タッチイベントを設定する</title>
      <link>https://alkn203.github.io/blog/2021/06/24/touch/</link>
      <pubDate>Thu, 24 Jun 2021 11:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/24/touch/</guid>
      <description>タッチイベント（onpointstart）  タッチイベントを登録するためには、オブジェクトのonpointstart関数を実装します。 タッチを有効にするためには、setInteractive(true) としてタッチ自体を有効にする必要があります。  // タッチ可能にする shape.setInteractive(true); // タッチイベント登録 shape.onpointstart = function() { alert(&amp;#39;タッチされました&amp;#39;); }; タッチイベント登録（on + pointstart） onとenterframeの組み合わせの時と同様に複数のメソッドを登録可能で、その内容が登録順に実行されます。
// タッチイベント登録 shape2.on(&amp;#39;pointstart&amp;#39;, function() { alert(&amp;#39;タッチされました&amp;#39;); }); // タッチイベント登録 shape2.on(&amp;#39;pointstart&amp;#39;, function() { shape2.backgroundColor = &amp;#39;blue&amp;#39;; }); サンプルコード  コードを見る // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // Shapeを作成してシーンに追加  var shape = Shape().</description>
    </item>
    
    <item>
      <title>更新イベントを設定する</title>
      <link>https://alkn203.github.io/blog/2021/06/24/update/</link>
      <pubDate>Thu, 24 Jun 2021 10:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/24/update/</guid>
      <description>更新イベント処理（update）  更新処理を行うためには、オブジェクトにupdate関数を実装します。 update関数が実装されていれば、その内容が毎フレーム実行されます。  // Shapeを作成してシーンに追加 var shape = Shape().addChildTo(this).setPosition(320, 480); // 更新処理 shape.update = function() { shape.moveBy(2, 2); }; 更新イベント処理（on + enterframe） update では1つの処理しか登録できません。一方、on とenterframeを組み合わせると複数のメソッドを登録可能で、その内容が並行して実行されます。
// 毎フレーム更新処理 shape2.on(&amp;#39;enterframe&amp;#39;, function() { // 移動  shape2.moveBy(-2, -2); }); // 毎フレーム更新処理 shape2.on(&amp;#39;enterframe&amp;#39;, function() { // 回転  shape2.rotation += 2; }); サンプルコード  コードを見る // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.</description>
    </item>
    
  </channel>
</rss>
