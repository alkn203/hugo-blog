<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shape on Keep On Coding</title>
    <link>https://alkn203.github.io/blog/tips/shape/</link>
    <description>Recent content in Shape on Keep On Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language><atom:link href="https://alkn203.github.io/blog/tips/shape/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shapeを透明・非表示にする</title>
      <link>https://alkn203.github.io/blog/2021/06/16/alpha-shape/</link>
      <pubDate>Wed, 16 Jun 2021 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/16/alpha-shape/</guid>
      <description>Shapeの透明度指定 alphaプロパティ Shapeの透明度はalphaプロパティで指定します。デフォルトが1.0で、小さくなるほど透明度が増し、 0で完全に透明になります。
var shape = Shape().addChildTo(this).setPosition(320, 480); shape.alpha = 0.25; Shapeの非表示 hideメソッド hideメソッドでShapeを非表示にすることができます。
var shape = Shape().addChildTo(this).setPosition(320, 480); shape.hide(); 透明の場合は、処理上も描画の対象で当たり判定があるのに対し、非表示の場合は、そもそも描画の対象とはならないという違いがあります。
サンプルコード  コードを見る // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // 透明度  var shape3 = Shape().addChildTo(this).setPosition(320, 600); shape3.alpha = 0.25; // 非表示  var shape4 = Shape().</description>
    </item>
    
    <item>
      <title>Shapeの背景色を指定する</title>
      <link>https://alkn203.github.io/blog/2021/06/16/color-shape/</link>
      <pubDate>Wed, 16 Jun 2021 19:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/16/color-shape/</guid>
      <description>Shapeの背景色指定 Shapeの背景色はbackgroundColorプロパティで指定します。 CSSと同じ感覚で指定できます。
文字列で指定 shape.backgroundColor = &amp;#39;red&amp;#39;; 16進数で指定 shape.backgroundColor = &amp;#39;#ffff00&amp;#39;; RGB値で指定 shape.backgroundColor = `rgb(0, 255, 255)`; hsl値で指定 shape.backgroundColor = `hsl(300, 75%, 50%)`; サンプルコード  コードを見る /// グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // 背景色（文字列）  var shape = Shape().addChildTo(this).setPosition(320, 480); shape.backgroundColor = &amp;#39;red&amp;#39;; // 背景色（RGB値）  var shape1 = Shape().</description>
    </item>
    
    <item>
      <title>Shapeを拡大・縮小させる</title>
      <link>https://alkn203.github.io/blog/2021/06/15/scale-shape/</link>
      <pubDate>Tue, 15 Jun 2021 22:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/15/scale-shape/</guid>
      <description>Shapeの拡大縮小 Shapeの拡大縮小には複数の方法があります。どちらの場合も 1.0を基準として、小さければ縮小、大きければ拡大になります。
scaleX scaleY プロパティに直接指定 var shape = Shape().addChildTo(this).setPosition(320, 480); // 横方向に拡大 shape.scaleX = 1.5; setScale関数で指定 setScale関数を使うと、縦横の拡大縮小をまとめて指定できます。また、生成から一気にチェインメソッドで繋げて書くことができます。
var shape = Shape().addChildTo(this).setPosition(320, 480).setScale(0.5, 0.5); サイズ変更と拡大・縮小の違いは、実際のサイズが変更されるかどうかです。拡大・縮小は見た目は変わっても実際のサイズは変更されませんので、当たり判定の時などに注意が必要です。
サンプルコード // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // 拡大  var shape8 = Shape().addChildTo(this).setPosition(150, 860); shape8.scaleX = 1.5; // 縮小  var shape9 = Shape().</description>
    </item>
    
    <item>
      <title>Shapeを回転させる</title>
      <link>https://alkn203.github.io/blog/2021/06/15/rotate-shape/</link>
      <pubDate>Tue, 15 Jun 2021 21:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/15/rotate-shape/</guid>
      <description>Shapeの回転 Shapeの回転角度指定には複数の方法があります。どちらの場合も 度=degreeで指定します。
rotaitionプロパティに直接指定 // Shapeを作成してシーンに追加 var shape = Shape().addChildTo(this).setPosition(320, 480); // 回転指定 shape.rotation = 45; setRotation関数で指定 setRotation関数を使うと、生成から一気にチェインメソッドで繋げて書くことができます。
var shape = Shape().addChildTo(this).setPosition(320, 600).setRotation(15); Shapeのコンストラクタで指定 位置などと一緒にコンストラクタでも指定できます。
var shape = Shape({ x: 320, y: 720, rotation: 60 }).addChildTo(this); 回転アニメーション Shapeのupdate関数でプロパティrotationの値を変更することで、回転アニメーションをさせることができます。
// スプライト回転 shape.update = function() { shape.rotation++; }; サンプルコード // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.</description>
    </item>
    
    <item>
      <title>Shapeのサイズを指定する</title>
      <link>https://alkn203.github.io/blog/2021/06/13/resize-shape/</link>
      <pubDate>Sun, 13 Jun 2021 21:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/13/resize-shape/</guid>
      <description>Shapeのサイズ指定 Shapeのサイズ指定には複数の方法があります。
幅指定 幅はwidthプロパティで指定します。
shape.width = 128; 高さ指定 高さはheightプロパティで指定します。
shape.height = 128; 幅・高さを一括指定 setSize関数を使えば、幅と高さを一括で指定できます。
shape.setSize(128, 256); コンストラクタ内で指定 位置指定と同じくコンストラクタ内で幅・高さを指定することも可能です。
var shape = Shape({ // 位置・幅・高さ指定  x: 320, y: 480, width: 128, height: 256, }).addChildTo(this); サンプルコード // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // 幅  var shape = Shape().</description>
    </item>
    
    <item>
      <title>Shapeの位置を指定する</title>
      <link>https://alkn203.github.io/blog/2021/06/13/locate-shape/</link>
      <pubDate>Sun, 13 Jun 2021 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/13/locate-shape/</guid>
      <description>Shapeの位置指定 Shapeの位置指定には複数の方法があります。
x,yプロパティに直接指定 // Shapeを作成してシーンに追加 var shape = Shape().addChildTo(this); // 位置指定 shape.x = 320; shape.y = 480; setPosition関数で一括指定 setPosition 関数を使えば、 x, y の値を一括で指定することができ、生成から一気にチェインメソッドで繋げて書くこともできるので便利です。
var shape = Shape().addChildTo(this).setPosition(320, 480); Shapeのコンストラクタで指定 var shape = Shape({ x: 320, y: 480 }).addChildTo(this) 移動量で指定 moveBy関数を使えば、x, yの移動量で位置を変更することができます。
shape.setPosition(320, 480).moveBy(100, 200); ベクトル値の加算で指定 Vector2クラスを使ってベクトル値の加算で位置指定する方法もあります。
var v = Vector2(100, 200); shape.position.add(v); サンプルコード // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.</description>
    </item>
    
    <item>
      <title>Shapeをシーンに表示する</title>
      <link>https://alkn203.github.io/blog/2021/06/12/add-shape/</link>
      <pubDate>Sat, 12 Jun 2021 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/12/add-shape/</guid>
      <description>Shapeをシーンに表示する phina.jsのオブジェクトの基本形であるShapeを画面に表示します。
var shape = Shape().addChildTo(this);  Shapeクラスのコンストラクタで生成します。コンストラクタの前にnewをつける必要はありません。 addChildTo(this) で現在の Scene に追加します。this は MainScene を指しています。 位置が指定されていない時は、画面左上(0,0)に表示されます。 変数に代入しなくても表示されますが、後にプロパティを操作することが多いので、とりあえずは変数に代入しておいた方が良いでしょう。 使用頻度は低いですがthis.addChild(shape)と書くこともできます。  サンプルコード // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // Shapeを作成してシーンに追加  var shape = Shape().addChildTo(this); }, }); /* * メイン処理 */ phina.main(function() { // アプリケーションを生成  var app = GameApp({ // MainScene から開始  startLabel: &amp;#39;main&amp;#39;, }); // fps表示  //app.</description>
    </item>
    
  </channel>
</rss>
