<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Frameanimation on Keep On Coding</title>
    <link>https://alkn203.github.io/blog/tips/frameanimation/</link>
    <description>Recent content in Frameanimation on Keep On Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language><atom:link href="https://alkn203.github.io/blog/tips/frameanimation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>フレームアニメーションの終了を検知する</title>
      <link>https://alkn203.github.io/blog/2021/06/19/frameamimation-end/</link>
      <pubDate>Sat, 19 Jun 2021 14:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/19/frameamimation-end/</guid>
      <description>フレームアニメーションの終了を検知する  ゲーム作成において、フレームアニメーションが終了した後に何か処理をしたい時があるかと思いまます。 この場合、FrameAnimation クラスのfinishedプロパティの値がtrueかどうかを調べると便利です。 サンプルでは爆発アニメーションが終了したら、自身を消去するようにしています。（consoleに結果表示）  // 毎フレーム処理 update: function() { // アニメーションが終わったら自身を消去  if (this.anim.finished) { // ←ここで判定  this.remove(); console.log(&amp;#39;removed&amp;#39;); } }, サンプルコード  コードを見る // グローバルに展開 phina.globalize(); // アセット var ASSETS = { // 画像  image: { &amp;#39;explosion&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/alkn203/assets_etc@master/explosion.png&amp;#39;, }, // スプライトシート  spritesheet: { &amp;#39;explosion_ss&amp;#39;: { &amp;#34;frame&amp;#34;: { &amp;#34;width&amp;#34;: 20, &amp;#34;height&amp;#34;: 20, &amp;#34;cols&amp;#34;: 16, &amp;#34;rows&amp;#34;: 1, }, // アニメーション  &amp;#34;animations&amp;#34; : { &amp;#34;start&amp;#34;: { &amp;#34;frames&amp;#34;: Array.</description>
    </item>
    
    <item>
      <title>スプライトのサイズがスプライトシートに定義されたサイズにフィットしないようにする</title>
      <link>https://alkn203.github.io/blog/2021/06/19/no-fit-ss-size/</link>
      <pubDate>Sat, 19 Jun 2021 13:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/19/no-fit-ss-size/</guid>
      <description>スプライトのサイズがスプライトシートに定義されたサイズにフィットしないようにする フレームアニメーションを使うためには、SpriteSheet を定義する必要がありますが、デフォルトだと実際のコード中でスプライトのサイズを変えてもスプライトシート(json)に書かれたwidthとheightに戻ってしまい、スプライトを拡大して表示したい時に意図した結果になりません。
// スプライトシート spritesheet: { &amp;#39;explosion_ss&amp;#39;: { &amp;#34;frame&amp;#34;: { &amp;#34;width&amp;#34;: 20, // ←この値にフィットされる  &amp;#34;height&amp;#34;: 20,// ←この値にフィットされる  &amp;#34;cols&amp;#34;: 16, &amp;#34;rows&amp;#34;: 1, }, } }  回避するためには、FrameAnimation クラスのプロパティfitをfalseにします。 これで実際に変更したサイズで正しく表示されるようになります。 サンプルでは20X20で切り出した画像を5倍で表示しています。  // 親クラスの初期化 this.superInit(&amp;#39;explosion&amp;#39;, 20, 20); // ←実際の画像の切り取りサイズ // SpriteSheetをスプライトにアタッチ var anim = FrameAnimation(&amp;#39;explosion_ss&amp;#39;).attachTo(this); // スプライトシートのサイズにフィットさせない anim.fit = false; // ←ここ //アニメーションを再生する anim.gotoAndPlay(&amp;#39;start&amp;#39;); // サイズ変更 this.setSize(20*5, 20*5); // ←サイズ変更 サンプルコード  コードを見る // グローバルに展開 phina.globalize(); // アセット var ASSETS = { // 画像  image: { &amp;#39;explosion&amp;#39;: &amp;#39;https://cdn.</description>
    </item>
    
    <item>
      <title>フレームアニメーションの速度を動的に変更する</title>
      <link>https://alkn203.github.io/blog/2021/06/19/change-amimation-speed/</link>
      <pubDate>Sat, 19 Jun 2021 13:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/19/change-amimation-speed/</guid>
      <description>フレームアニメーション設定の変更 外部ファイルとして読み込まれたフレームアニメーション設定を後から変更する方法について説明します。例として、フレームアニメーションの速度を変更します。
フレームアニメーション設定を外部ファイルに定義 フレームアニメーション設定は外部ファイルとして定義して、アセットとして読み込むことができます。
// アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/images/tomapiko_ss.png&amp;#39;, }, // フレームアニメーション情報  spritesheet: { &amp;#39;tomapiko_ss&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/tmss/tomapiko.tmss&amp;#39;, }, }; アニメーションのfreaquencyプロパティ  anim を FrameAnimation クラスのインスタンスとした場合、ss で SpriteSheet を参照することができます。 getAnimationで指定したアニメーションを参照することができるので、そのプロパティfreaquencyの値を変更します。  // アニメーション速度変更 anim.ss.getAnimation(&amp;#39;left&amp;#39;).frequency += 1; 以下のサンプルでは、画面をタッチするとフレームアニメーションの速度が遅くなっていきます。
サンプルコード  コードを見る // グローバルに展開 phina.globalize(); // アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/images/tomapiko_ss.png&amp;#39;, }, // フレームアニメーション情報  spritesheet: { &amp;#39;tomapiko_ss&amp;#39;: &amp;#39;https://cdn.</description>
    </item>
    
    <item>
      <title>フレームアニメーションしながら移動させる</title>
      <link>https://alkn203.github.io/blog/2021/06/19/frameamimation-move/</link>
      <pubDate>Sat, 19 Jun 2021 12:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/19/frameamimation-move/</guid>
      <description>Sprite画像をフレームアニメーションしたまま移動させます。
update関数に移動処理を記述する フレームアニメーションは自動で管理されていますので、単にupdate関数内に移動処理を書くだけで移動させることができます。
// スプライト画像作成 var sprite = Sprite(&amp;#39;tomapiko&amp;#39;, 64, 64).addChildTo(this); sprite.setPosition(600, 480); // スプライトにフレームアニメーションをアタッチ var anim = FrameAnimation(&amp;#39;tomapiko_ss&amp;#39;).attachTo(sprite); // アニメーションを指定する anim.gotoAndPlay(&amp;#39;walk&amp;#39;); // 更新 sprite.update = function() { // 移動処理  sprite.x -= 2; }; サンプルコード  コードを見る // グローバルに展開 phina.globalize(); // アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/images/tomapiko_ss.png&amp;#39;, }, // スプライトシート  spritesheet: { &amp;#34;tomapiko_ss&amp;#34;: { // フレーム情報  &amp;#34;frame&amp;#34;: { &amp;#34;width&amp;#34;: 64, // 1フレームの画像サイズ（横）  &amp;#34;height&amp;#34;: 64, // 1フレームの画像サイズ（縦）  &amp;#34;cols&amp;#34;: 6, // フレーム数（横）  &amp;#34;rows&amp;#34;: 3, // フレーム数（縦）  }, // アニメーション情報  &amp;#34;animations&amp;#34; : { &amp;#34;walk&amp;#34;: { // アニメーション名  &amp;#34;frames&amp;#34;: [12,13,14], // フレーム番号範囲  &amp;#34;next&amp;#34;: &amp;#34;walk&amp;#34;, // 次のアニメーション  &amp;#34;frequency&amp;#34;: 6, // アニメーション間隔  }, } }, } }; /* * メインシーン */ phina.</description>
    </item>
    
    <item>
      <title>フレームアニメーションを設定する</title>
      <link>https://alkn203.github.io/blog/2021/06/19/frameamimation/</link>
      <pubDate>Sat, 19 Jun 2021 11:58:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/19/frameamimation/</guid>
      <description>Sprite画像でフレームアニメーションを設定します。
スプライトシート画像を用意する スプライトシート画像とは、以下のようにアニメーション用のコマをシートの様に並べた画像です。
 上の画像だと、横6x縦3の計18コマから成り立っています。 ゲーム作成ではコマのことをフレームと呼ぶことが多いです。  スプライトシート画像を読み込む 通常の画像と同じようにASSETSとして読み込みます。
// アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/images/tomapiko_ss.png&amp;#39;, }, }; フレームアニメーション情報を読み込む  フレームアニメーション情報が定義されたjson形式のファイルを読み込む方法が一般的ですが、今回はファイルからではなくASEETSとして、コード内に定義しています。 コード内に記述して十分に動作確認した後に、外部jsonファイルに保存してアセットとして読み込む方が、開発する上では効率的です。  // アセット var ASSETS = { // 画像  image: { &amp;#39;tomapiko&amp;#39;: &amp;#39;https://cdn.jsdelivr.net/gh/phinajs/phina.js@develop/assets/images/tomapiko_ss.png&amp;#39;, }, // スプライトシート  spritesheet: { &amp;#34;tomapiko_ss&amp;#34;: { // フレーム情報  &amp;#34;frame&amp;#34;: { &amp;#34;width&amp;#34;: 64, // 1フレームの画像サイズ（横）  &amp;#34;height&amp;#34;: 64, // 1フレームの画像サイズ（縦）  &amp;#34;cols&amp;#34;: 6, // フレーム数（横）  &amp;#34;rows&amp;#34;: 3, // フレーム数（縦）  }, // アニメーション情報  &amp;#34;animations&amp;#34; : { &amp;#34;walk&amp;#34;: { // アニメーション名  &amp;#34;frames&amp;#34;: [12,13,14], // フレーム番号範囲  &amp;#34;next&amp;#34;: &amp;#34;walk&amp;#34;, // 次のアニメーション  &amp;#34;frequency&amp;#34;: 6, // アニメーション間隔  }, } }, } };  framesにアニメーションに使いたいフレーム番号の範囲を書きます。 0から始まることに注意してください。 nextに次のアニメーションを指定します。同じ名前にするとループします。 frequencyでアニメーションの間隔を指定します。小さくすれば速くなり、大きくすれば遅くなります。  スプライトシート画像の作成 スプライトシート画像は、通常の画像と同じくSpriteクラスを使って作成しますが、アセット名の次の引数で１フレームの画像サイズを指定します。</description>
    </item>
    
  </channel>
</rss>
