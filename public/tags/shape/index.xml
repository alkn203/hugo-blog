<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shape on Keep Coding</title>
    <link>https://alkn203.github.io/blog/tags/shape/</link>
    <description>Recent content in Shape on Keep Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 26 Apr 2017 00:13:06 +0900</lastBuildDate>
    <atom:link href="https://alkn203.github.io/blog/tags/shape/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Shapeの更新イベントを登録する</title>
      <link>https://alkn203.github.io/blog/2017/04/26/update-shape</link>
      <pubDate>Wed, 26 Apr 2017 00:13:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/04/26/update-shape</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Shape&lt;/strong&gt;に対してフレーム更新処理を登録する方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/update-shape.gif&#34; alt=&#34;upate-shape.gif&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;更新イベント処理-update&#34;&gt;更新イベント処理（update）&lt;/h3&gt;

&lt;p&gt;更新処理を登録するためには、&lt;strong&gt;shape&lt;/strong&gt;の&lt;strong&gt;update&lt;/strong&gt;関数を実装します。
&lt;strong&gt;update&lt;/strong&gt;関数が実装されていると、その内容が毎フレーム実行されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// 毎フレーム更新処理
shape.update = function() {
  // 移動
  shape.moveBy(1, 1);  
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/d709760f&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;更新イベント処理-on-enterframe&#34;&gt;更新イベント処理（on + enterframe）&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;では1つのメソッドしか登録できません。一方、&lt;strong&gt;on&lt;/strong&gt;と&lt;strong&gt;enterframe&lt;/strong&gt;を組み合わせると複数のメソッドを登録可能で、その内容が並行して実行されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// 毎フレーム更新処理
shape.on(&#39;enterframe&#39;, function() {
  // 移動
  shape.moveBy(1, 1);  
});
// 毎フレーム更新処理
shape.on(&#39;enterframe&#39;, function() {
  // 回転
  shape.rotation++;  
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/0705ecfc&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shapeの原点を変更する</title>
      <link>https://alkn203.github.io/blog/2017/04/25/change-shape-origin</link>
      <pubDate>Tue, 25 Apr 2017 00:13:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/04/25/change-shape-origin</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;phina.js&lt;/strong&gt;では、デフォルトでオブジェクトの原点は中心となっており、配置や回転処理などではこの原点が基準となります。
今回は&lt;strong&gt;Shape&lt;/strong&gt;を例にオブジェクトの原点を変更する方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/change-shape-origin.gif&#34; alt=&#34;change-shape-origin.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/7058dacc&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;上の例では、同じ矩形でも回転の中心が違うのが分かるかと思います。&lt;/p&gt;

&lt;h3 id=&#34;originプロパティと原点の位置&#34;&gt;originプロパティと原点の位置&lt;/h3&gt;

&lt;p&gt;オブジェクトの原点は&lt;strong&gt;origin&lt;/strong&gt;で指定でき、位置関係は以下のようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;origin.set(0.5, 0.5)&lt;/strong&gt;・・・中心（デフォルト）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;origin.set(0, 0)&lt;/strong&gt;・・・左上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;origin.set(0, 1)&lt;/strong&gt;・・左下&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;origin.set(1, 0)&lt;/strong&gt;・・右上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;origin.set(1, 1)&lt;/strong&gt;・・右下&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例えば&lt;strong&gt;shape&lt;/strong&gt;の原点を左上にしたい場合、以下のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shape.origin.set(0, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;サンプルコード&#34;&gt;サンプルコード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // 初期化
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景色
    this.backgroundColor = &#39;black&#39;;
    // Shapeを作成してシーンに追加
    var shape = Shape().addChildTo(this);
    // 移動
    shape.x = 320;
    shape.y = 480;
    // 回転
    shape.update = function() {
      shape.rotation += 2;  
    };

    var shape2 = Shape().addChildTo(this);
    // 移動
    shape2.x = 320;
    shape2.y = 240;
    // 左上を原点に
    shape2.origin.set(0, 0);
    // 回転
    shape2.update = function() {
      shape2.rotation += -2;  
    };
    
    var shape3 = Shape().addChildTo(this);
    // 移動
    shape3.x = 320;
    shape3.y = 720;
    // 右下を原点に
    shape3.origin.set(1, 1);
    // 回転
    shape3.update = function() {
      shape3.rotation += -2;  
    };
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>カラフルなShapeをランダムな位置にたくさん表示する</title>
      <link>https://alkn203.github.io/blog/2017/04/23/random-locate-col-shapes</link>
      <pubDate>Sun, 23 Apr 2017 15:13:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/04/23/random-locate-col-shapes</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;様々な色の&lt;strong&gt;Shape&lt;/strong&gt;を画面上のランダムな位置にたくさん表示します。
&lt;a href=&#34;http://alkn203.github.io/blog/2017/04/22/random-locate-shapes/&#34;&gt;Shapeをランダムな位置にたくさん表示する&lt;/a&gt;に色指定を追加します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/random-locate-col-shapes.gif&#34; alt=&#34;random-locate-col-shape.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/7058dacc&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;hslとformatメソッドを使った色指定&#34;&gt;hslとformatメソッドを使った色指定&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HSL色空間&lt;/strong&gt;は、&lt;strong&gt;色相&lt;/strong&gt;（Hue）、&lt;strong&gt;彩度&lt;/strong&gt;（Saturation）、&lt;strong&gt;輝度&lt;/strong&gt;（Lightness）で色を指定します。使い方は、&lt;a href=&#34;http://alkn203.github.io/blog/2017/04/22/background-shape/&#34;&gt;Shapeの背景色を指定する&lt;/a&gt;を参考にして下さい。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;format&lt;/strong&gt;は、&lt;strong&gt;String&lt;/strong&gt;クラスの拡張メソッドで、引数で与えられた値を文字列に引き渡します。以下の様に使います。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var hue = Random.randint(0, 360);
var color = &#39;hsl({0}, 75%, 50%)&#39;.format(hue);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;上の例ですと、変数&lt;strong&gt;hue&lt;/strong&gt;に代入されたランダムな整数値を&lt;strong&gt;format&lt;/strong&gt;メソッドに与えることで前段の文字列内の&lt;strong&gt;{0}&lt;/strong&gt;が&lt;strong&gt;hue&lt;/strong&gt;の値に置き換わります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;lsquo;hsl({0}, {1}, 50%)&amp;rsquo;.format(hue, saturation)&lt;/strong&gt;のように引数を増やすこともできます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;サンプルコード&#34;&gt;サンプルコード&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// 定数
var SCREEN_WIDTH = 640;
var SCREEN_HEIGHT = 960;
var SHAPE_SIZE = 16;
var SHAPE_HALF = SHAPE_SIZE / 2;
var NUM = 50;
var SATURATION = 100;   // 彩度
var LIGHTNESS = 50; // 輝度
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // 初期化
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景色
    this.backgroundColor = &#39;black&#39;;
    // function内でthisを参照するための設定
    var self = this;
    // 繰り返し処理
    (NUM).times(function(i) {
      // Shapeを作成してシーンに追加
      var shape = Shape({
        width: SHAPE_SIZE,
        height: SHAPE_SIZE,
      }).addChildTo(self);
      // 画面上に収まるランダムな位置に配置
      shape.x = Random.randint(SHAPE_HALF, SCREEN_WIDTH - SHAPE_HALF);
      shape.y = Random.randint(SHAPE_HALF, SCREEN_HEIGHT - SHAPE_HALF);
      // 背景色をランダムに設定
      var hue = Random.randint(0, 360);
      shape.backgroundColor = &#39;hsl({0}, 75%, 50%)&#39;.format(hue);
    });
  },
});
/*
 * メイン処理
 */phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Shapeをランダムな位置にたくさん表示する</title>
      <link>https://alkn203.github.io/blog/2017/04/22/random-locate-shapes</link>
      <pubDate>Sat, 22 Apr 2017 15:13:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/04/22/random-locate-shapes</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Shape&lt;/strong&gt;を画面上のランダムな位置にたくさん表示します。
&lt;a href=&#34;http://alkn203.github.io/blog/2017/04/22/random-locate-shape/&#34;&gt;前回のTips&lt;/a&gt;に繰り返し処理を追加します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/random-locate-shapes.gif&#34; alt=&#34;random-locate-shape.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/4d83a38d&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;timesメソッドを使った繰り返し処理&#34;&gt;timesメソッドを使った繰り返し処理&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;javascript&lt;/strong&gt;で繰り返し処理を行う時には、&lt;strong&gt;for&lt;/strong&gt;を使うのが一般的です。
&lt;strong&gt;phina.js&lt;/strong&gt;のTipsということもありますので、今回は元々の&lt;strong&gt;Number&lt;/strong&gt;クラスの拡張メソッド&lt;strong&gt;times&lt;/strong&gt;を使います。使い方は以下のとおりです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(10).times(function(i) {
  console.log(i);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;function&lt;/strong&gt;の内部の処理を冒頭に指定された数の回数繰り返します。&lt;/li&gt;
&lt;li&gt;変数&lt;strong&gt;i&lt;/strong&gt;にインデックス値が入ってきますので、上の例では結果として&lt;strong&gt;0から9&lt;/strong&gt;の数字が出力されます。&lt;/li&gt;
&lt;li&gt;繰り返しが目的であれば、&lt;strong&gt;i&lt;/strong&gt;の値を必ずしも使用する必要はありません。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;サンプルコード&#34;&gt;サンプルコード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// 定数
var SCREEN_WIDTH = 640;
var SCREEN_HEIGHT = 960;
var SHAPE_SIZE = 16;
var SHAPE_HALF = SHAPE_SIZE / 2;
var NUM = 50;
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // 初期化
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景色
    this.backgroundColor = &#39;black&#39;;
    // function内でthisを参照するための設定
    var self = this;
    // 繰り返し処理
    (NUM).times(function(i) {
      // Shapeを作成してシーンに追加
      var shape = Shape({
        width: SHAPE_SIZE,
        height: SHAPE_SIZE,
        backgroundColor: &#39;red&#39;,
      }).addChildTo(self);
      // 画面上に収まるランダムな位置に配置
      shape.x = Random.randint(SHAPE_HALF, SCREEN_WIDTH - SHAPE_HALF);
      shape.y = Random.randint(SHAPE_HALF, SCREEN_HEIGHT - SHAPE_HALF);
    });
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;times&lt;/strong&gt;メソッドの回数に指定する数値は変数でも良いので、このサンプルのように定数定義しておくと便利です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;times&lt;/strong&gt;メソッドの&lt;strong&gt;function&lt;/strong&gt;内部で&lt;strong&gt;this&lt;/strong&gt;を使うと&lt;strong&gt;function&lt;/strong&gt;そのものを参照することになるので、その前に&lt;strong&gt;var self = this&lt;/strong&gt;で退避して、内部では&lt;strong&gt;self&lt;/strong&gt;を使うことで正しい参照になるようにしています。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Shapeをランダムな位置に表示する</title>
      <link>https://alkn203.github.io/blog/2017/04/22/random-locate-shape</link>
      <pubDate>Sat, 22 Apr 2017 15:13:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/04/22/random-locate-shape</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;実行する度に&lt;strong&gt;Shape&lt;/strong&gt;を画面上のランダムな位置に表示します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/random-locate-shape.gif&#34; alt=&#34;random-locate-shape.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/4b44a4dd&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;randomクラスを使う&#34;&gt;Randomクラスを使う&lt;/h3&gt;

&lt;p&gt;ランダムな位置に表示するためには、ランダムな数値が必要です。&lt;strong&gt;phina.js&lt;/strong&gt;にはこれを取り扱う&lt;strong&gt;phina.util.Random&lt;/strong&gt;クラスが用意されています。
今回は&lt;strong&gt;Random&lt;/strong&gt;クラスの&lt;strong&gt;randint&lt;/strong&gt;メソッドを使います。使い方は以下のとおりです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var rnd = Random.randint(0, 100);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上の例ですと、変数&lt;strong&gt;rnd&lt;/strong&gt;に&lt;strong&gt;0から100&lt;/strong&gt;の間でランダムな&lt;strong&gt;整数&lt;/strong&gt;が1つ代入されます。&lt;/p&gt;

&lt;h3 id=&#34;使用例&#34;&gt;使用例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shape.x = Random.randint(SHAPE_HALF, SCREEN_WIDTH - SHAPE_HALF);
shape.y = Random.randint(SHAPE_HALF, SCREEN_HEIGHT - SHAPE_HALF);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SHAPE_HALF&lt;/strong&gt;は&lt;strong&gt;Shape&lt;/strong&gt;のサイズの半分の値で、&lt;strong&gt;Shape&lt;/strong&gt;が画面からはみ出さないように&lt;strong&gt;randint&lt;/strong&gt;の範囲を調整しています。半分にしたのは、&lt;strong&gt;Shape&lt;/strong&gt;の座標は&lt;strong&gt;中心が起点(origin)&lt;/strong&gt;になっているためです。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;コード&#34;&gt;コード&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// 定数
var SCREEN_WIDTH = 640;
var SCREEN_HEIGHT = 960;
var SHAPE_SIZE = 16;
var SHAPE_HALF = SHAPE_SIZE / 2;
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // 初期化
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景色
    this.backgroundColor = &#39;black&#39;;
    // Shapeを作成してシーンに追加
    var shape = Shape({
      width: SHAPE_SIZE,
      height: SHAPE_SIZE,
      backgroundColor: &#39;red&#39;,
    }).addChildTo(this);
    // 画面上に収まるランダムな位置に配置
    shape.x = Random.randint(SHAPE_HALF, SCREEN_WIDTH - SHAPE_HALF);
    shape.y = Random.randint(SHAPE_HALF, SCREEN_HEIGHT - SHAPE_HALF);
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Shapeを透明化・非表示にする</title>
      <link>https://alkn203.github.io/blog/2017/04/22/alpha-shape</link>
      <pubDate>Sat, 22 Apr 2017 12:13:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/04/22/alpha-shape</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Shape&lt;/strong&gt;を透明化または非表示にします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/phina-template.gif&#34; alt=&#34;phina-template.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/7e1a191a&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;shapeの透明化&#34;&gt;Shapeの透明化&lt;/h3&gt;

&lt;p&gt;透明にするには&lt;strong&gt;alpha&lt;/strong&gt;プロパティに&lt;strong&gt;0&lt;/strong&gt;を指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shape.alpha = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;alpha&lt;/strong&gt;プロパティには&lt;strong&gt;0から1&lt;/strong&gt;が指定できるので、好みの透明度にすることができます。&lt;/p&gt;

&lt;h3 id=&#34;shapeの非表示&#34;&gt;Shapeの非表示&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;phina.js&lt;/strong&gt;では、透明化の他に&lt;strong&gt;hide&lt;/strong&gt;メソッドでオブジェクトそのものを非表示にすることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shape.hide();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/3df6a8b8&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;再表示するには、&lt;strong&gt;show&lt;/strong&gt;メソッドを使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shape.show();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;透明化と非表示の違い&#34;&gt;透明化と非表示の違い&lt;/h3&gt;

&lt;p&gt;透明化ではオブジェクト自体は存在するので、当たり判定やタッチ処理は有効ですが、非表示にした場合は描画自体されないので、当たり判定やタッチ処理は無効になります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shapeのサイズを指定する</title>
      <link>https://alkn203.github.io/blog/2017/04/22/resize-shape</link>
      <pubDate>Sat, 22 Apr 2017 00:28:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/04/22/resize-shape</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Shape&lt;/strong&gt;の幅・高さを指定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/resize-shape.gif&#34; alt=&#34;resize-shape&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/4e8bc6e6&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;幅指定&#34;&gt;幅指定&lt;/h3&gt;

&lt;p&gt;幅は&lt;strong&gt;width&lt;/strong&gt;プロパティで指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shape.width = 128;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/7fad0439&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;高さ指定&#34;&gt;高さ指定&lt;/h3&gt;

&lt;p&gt;高さは&lt;strong&gt;height&lt;/strong&gt;プロパティで指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shape.height = 128;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/5da92e05&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;幅-高さを一括指定&#34;&gt;幅・高さを一括指定&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;setSize&lt;/strong&gt;を使えば、幅と高さを一括で指定できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shape.setSize(128, 256);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/8de8694c&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;コンストラクタ内で指定&#34;&gt;コンストラクタ内で指定&lt;/h3&gt;

&lt;p&gt;位置指定と同じくコンストラクタ内で幅・高さを指定することも可能です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    var shape = Shape({
      // 位置・幅・高さ指定
      x: 320,
      y: 480,
      width: 128,
      height: 256,
    }).addChildTo(this);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/1a3e59cf&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shapeの背景色を指定する</title>
      <link>https://alkn203.github.io/blog/2017/04/22/background-shape</link>
      <pubDate>Sat, 22 Apr 2017 00:28:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/04/22/background-shape</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Shape&lt;/strong&gt;の背景色を指定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/background-shape.gif&#34; alt=&#34;backgruond-shape.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;背景色指定&#34;&gt;背景色指定&lt;/h2&gt;

&lt;p&gt;背景色は&lt;strong&gt;backgroundColor&lt;/strong&gt;プロパティで指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shape.backgroundColor = &#39;red&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/57cab291&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;他の指定方法&#34;&gt;他の指定方法&lt;/h2&gt;

&lt;h3 id=&#34;16進数&#34;&gt;16進数&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;css&lt;/strong&gt;と同様に指定できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shape.backgroundColor = &#39;#ffff00&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/6a5a9d1d&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;rgb&#34;&gt;RGB&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Rgb&lt;/strong&gt;クラスを使って指定できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shape.backgroundColor = `rgb(0, 255, 255)`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/cb651549&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;hsl&#34;&gt;hsl&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;css&lt;/strong&gt;と同様に指定できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shape.backgroundColor = `hsl(300, 75%, 50%)`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/accb7a5a&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shapeの位置を指定する</title>
      <link>https://alkn203.github.io/blog/2017/04/21/relocate-shape</link>
      <pubDate>Fri, 21 Apr 2017 00:28:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/04/21/relocate-shape</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Shape&lt;/strong&gt;の位置を以下のように指定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/relocate-shape.gif&#34; alt=&#34;locate-shape&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/4e8bc6e6&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;shapeの位置指定&#34;&gt;Shapeの位置指定&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Shapeを作成してシーンに追加
var shape = Shape().addChildTo(this);
// 移動
shape.x = 320;
shape.y = 480;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shape&lt;/strong&gt;の位置変更は、&lt;strong&gt;x, y&lt;/strong&gt;プロパティに直接数値を指定することで可能です。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;他の位置指定方法&#34;&gt;他の位置指定方法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;setPosition&lt;/strong&gt;関数を使えば、&lt;strong&gt;x, y&lt;/strong&gt;の値を一括で指定することができ、生成から一気にチェインメソッドで繋げて書くこともできるので便利です。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var shape = Shape().addChildTo(this).shape.setPosition(320, 480);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/4c21e518&#34;&gt;[runstantで実行]&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shape&lt;/strong&gt;のコンストラクタにパラメータとして与えてることでも指定できます。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var shape = Shape({
  x: 320,
  y: 480
}).addChildTo(this)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/81ae38a5&#34;&gt;[runstantで実行]&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;moveBy&lt;/strong&gt;関数を使えば、&lt;strong&gt;x, y&lt;/strong&gt;の移動量で位置を変更することができます。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shape.setPosition(320, 480).moveBy(100, 200);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/af6327d3&#34;&gt;[runstantで実行]&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;他に、&lt;strong&gt;Vector2&lt;/strong&gt;クラスを使ってベクトル値の加算で位置指定する方法もあります。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var v = Vector2(100, 200);
shape.position.add(v);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/6a11250f&#34;&gt;[runstantで実行]&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shapeを生成してSceneに追加する</title>
      <link>https://alkn203.github.io/blog/2017/04/20/locate-shape</link>
      <pubDate>Thu, 20 Apr 2017 00:28:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/04/20/locate-shape</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;オブジェクトの基本形である&lt;strong&gt;Shape&lt;/strong&gt;を以下のように画面に表示します。
位置を指定しなければ、画面左上に表示されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/locate-shape.gif&#34; alt=&#34;locate-shape&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/c5ac89af&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;shapeの追加&#34;&gt;Shapeの追加&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    // Shapeを作成してシーンに追加
    Shape().addChildTo(this);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shape&lt;/strong&gt;クラスを使って生成します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;phina.js&lt;/strong&gt;は、コンストラクタの前に&lt;strong&gt;new&lt;/strong&gt;をつける必要はありません。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;addChildTo(this)&lt;/strong&gt;で現在の&lt;strong&gt;Scene&lt;/strong&gt;に追加します。&lt;strong&gt;this&lt;/strong&gt;は&lt;strong&gt;MainScene&lt;/strong&gt;を指しています。&lt;/li&gt;
&lt;li&gt;位置が指定されていない時は、画面左上(0,0)を中心として表示されます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;コード&#34;&gt;コード&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // 初期化
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景色
    this.backgroundColor = &#39;black&#39;;
    // Shapeを作成してシーンに追加
    Shape().addChildTo(this);
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>オブジェクトのグループ間移動のサンプル</title>
      <link>https://alkn203.github.io/blog/2016/02/18/phina-group-change</link>
      <pubDate>Thu, 18 Feb 2016 23:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2016/02/18/phina-group-change</guid>
      <description>

&lt;h3 id=&#34;今回のサンプル&#34;&gt;今回のサンプル&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;phina.js&lt;/strong&gt;において複数のオブジェクトを取り扱う時には、自ずとグループ管理が必須になってきます。
グループ管理には、&lt;strong&gt;DisplayElement&lt;/strong&gt;(旧CanvasElement)を活用しますが、例えば、AグループとBグループがあった場合&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Aグループの要素.addChildTo(Bグループ);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすることで、&lt;strong&gt;要素はAグループからBグループへ移動&lt;/strong&gt;します。今回のサンプルでは、この仕様を利用して&lt;strong&gt;落下するオブジェクトと固定されたオブジェクトの当たり判定&lt;/strong&gt;を行っています。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/phina-group-change.png&#34; alt=&#34;phina-group-change&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;phina.globalize();
// 定数
var SCREEN_HEIGHT = 960;
// メインシーン
phina.define(&#39;MainScene&#39;, {
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景色
    this.backgroundColor = &#39;gray&#39;;
    // 落下グループ
    this.dynamicGroup = DisplayElement().addChildTo(this);
    // 固定グループ
    this.staticGroup = DisplayElement().addChildTo(this);
  },
  // 毎フレーム更新
  update: function(app) {
    // 一定フレーム毎にブロック作成
    if (app.frame % 50 === 0) {
      Block().addChildTo(this.dynamicGroup)
             .setPosition(this.gridX.center(Random.randint(-1, 1)), 0)
             .physical.gravity.set(0, 0.25);
    }
    
    var self = this;
    // 画面下との当たり判定
    this.dynamicGroup.children.each(function(block) {
      if (block.bottom &amp;gt; SCREEN_HEIGHT) {
        block.disable();
        // 位置補正
        block.bottom = SCREEN_HEIGHT;
        // 固定グループへ移動
        block.addChildTo(self.staticGroup);
      }  
    });
    // 固定ブロックとの当たり判定
    this.dynamicGroup.children.each(function(block) {
      self.staticGroup.children.each(function(target) {
        if (block.hitTestElement(target)) {
          block.disable();
          block.bottom = target.top;
          block.addChildTo(self.staticGroup);
        }  
      });
    });
  },
});
// ブロッククラス
phina.define(&#39;Block&#39;, {
  // RectangleShapeクラスを継承
  superClass: &#39;RectangleShape&#39;,
  // コンストラクタ
  init: function() {
    this.superInit({
      width: 40,
    });
  },
  // 固定ブロック仕様にする
  disable: function() {
    this.physical.gravity.y = 0;
    this.physical.velocity.y = 0;
    this.fill = &#39;silver&#39;;
  },
});
// メイン
phina.main(function() {
  var app = GameApp({
    startLabel: &#39;main&#39;,
  });
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/8421fe5a&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ShapeとCanvas描画を組み合わせたサンプル（時計Shape）</title>
      <link>https://alkn203.github.io/blog/2016/02/16/phina-canvas2</link>
      <pubDate>Tue, 16 Feb 2016 23:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2016/02/16/phina-canvas2</guid>
      <description>

&lt;h3 id=&#34;今回の内容&#34;&gt;今回の内容&lt;/h3&gt;

&lt;p&gt;以前に&lt;strong&gt;tmlib.js&lt;/strong&gt;で作った物を&lt;strong&gt;phina.js&lt;/strong&gt;にリファクタリングしてみました。
&lt;strong&gt;Shape&lt;/strong&gt;を通常の&lt;strong&gt;canvas&lt;/strong&gt;と見なせますので、今回の時計に限らず、&lt;strong&gt;canvas&lt;/strong&gt;で描けるものは全て&lt;strong&gt;Shape&lt;/strong&gt;として取り扱うことができます。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/phina-canvas2.png&#34; alt=&#34;phina-canvas2&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// 定数
var SCREEN_WIDTH = 640;
var SCREEN_HEIGHT = 960;
var CENTER_X = SCREEN_WIDTH / 2;
var CENTER_Y = SCREEN_HEIGHT / 2;
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // 初期化
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景色
    this.backgroundColor = &#39;black&#39;;
    // 時計Shapeを作成
    this.clock = ClockShape({
      width: 320, // 幅
      height: 320, // 高さ
      fill: &amp;quot;silver&amp;quot;,
      stroke: &amp;quot;gray&amp;quot;,
    }).addChildTo(this).setPosition(320, 480);
    
    this.clock.physical.gravity.y = 0.5;
  },
  // 毎フレーム更新
  update: function() {
    // canvasを再描画するようにフラグを立てる
    this.clock._dirtyDraw = true;
    
    if (this.clock.bottom &amp;gt; 960) {
      this.clock.physical.force(0, -10);
    }
  },
});
/*
 * 時計Shapeクラス
 */ 
phina.define(&#39;ClockShape&#39;, {
  // Shapeクラスを継承
  superClass: &#39;Shape&#39;,
  // コンストラクタ
  init: function(options) {
    this.superInit(options);
    this.backgroundColor = &#39;transparent&#39;;
  },
  // 自身のcanvasの描画内容
  prerender: function(canvas) {
    // 描画領域クリア
    canvas.clear();
    // スタイル指定
    canvas.fillStyle = this.fill;
    canvas.strokeStyle = this.stroke;
    // 半径
    var radius = this.radius;
    // canvasの中心
    var cx = 0;
    var cy = 0;
    var baseW = radius / 50;
    // 時計盤描画
    canvas.fillCircle(cx, cy, radius);
    canvas.lineWidth = baseW;
    canvas.strokeCircle(cx, cy, radius - 2);
    canvas.lineWidth = baseW * 2;
    canvas.strokeCircle(cx, cy, radius * 9.0 / 10);
    // 目盛終点
    var tr = radius * 8.3 / 10;
    // 角度
    var deg = 0;
    canvas.lineWidth = baseW;
    // 繰り返し
    (60).times(function(i) {
      // 目盛始点（5分毎の目盛か判定）
      var fr = deg % 30 === 0 ? radius * 7.5 / 10 : radius * 8.0 / 10; 
      // 目盛描画
      var rad = Math.degToRad(deg);
      var fromX = cx + fr * Math.cos(rad);
      var fromY = cx + fr * Math.sin(rad);
      var toX = cx + tr * Math.cos(rad);
      var toY = cx + tr * Math.sin(rad);
      canvas.drawLine(fromX, fromY, toX, toY);
      // 角度を進める
      deg += 6;
    });
    // 現在の時刻
    var d = new Date();
    // 時は12時間表記へ
    var hour = d.getHours() - 12;
    var minute = d.getMinutes();
    var second = d.getSeconds();
    // 短針の長さ
    var hr = radius * 6.0 / 10;
    // 長針、秒針の長さ
    var sr = radius * 7.7 / 10;
    // 角度補正値
    var adj = 90;
    // 短針描画
    this.drawRadialLine(cx, cy, hr, hour * 30 + minute / 2 - adj);
    // 長針描画
    this.drawRadialLine(cx, cy, sr, minute * 6 - adj);
    // 秒針描画
    canvas.lineWidth = baseW / 2;
    this.drawRadialLine(cx, cy, sr, second * 6 - adj);
    this.drawRadialLine(cx, cy, -radius * 2.0 / 10, second * 6 - adj);
    // 中央円
    canvas.save();
    canvas.fillStyle = canvas.strokeStyle;
    canvas.fillCircle(cx, cy, radius * 0.4 / 10);
    canvas.restore();
  },
  // 中心から放射状に線を描画
  drawRadialLine: function(cx, cy, radius, deg) {
    var rad = Math.degToRad(deg);
    // 円周上の点計算
    var toX = cx + radius * Math.cos(rad);
    var toY = cy + radius * Math.sin(rad);
    // 線描画
    this.canvas.drawLine(cx, cy, toX, toY);
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/7610ec35&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>