<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>minesweeper on Keep On Coding</title>
    <link>https://alkn203.github.io/blog/tags/minesweeper/</link>
    <description>Recent content in minesweeper on Keep On Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 16 Oct 2020 20:56:06 +0900</lastBuildDate><atom:link href="https://alkn203.github.io/blog/tags/minesweeper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【phina.js】ゲーム作成チュートリアル（マインスイーパー）=第４回 パネルを連鎖で開く=</title>
      <link>https://alkn203.github.io/blog/2020/10/16/minesweeper-04/</link>
      <pubDate>Fri, 16 Oct 2020 20:56:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2020/10/16/minesweeper-04/</guid>
      <description>今回の目標 前回はパネルを開くと周りにある爆弾の数が表示されるようにしました。今回は、周りに爆弾がない場合にパネルを連鎖で開くようにします。
openPanel関数 // パネルを開く処理 openPanel: function(panel) { (略) // パネルに数を表示  panel.num = bombs === 0 ? &amp;#39;&amp;#39; : bombs; Label({ text: panel.num, fill: &amp;#39;white&amp;#39;, }).addChildTo(panel); panel.fill = &amp;#39;gray&amp;#39;; // 周りに爆弾がなければ再帰的に調べる  if (bombs === 0) { indexs.each(function(i) { indexs.each(function(j) { var pos = Vector2(panel.x + i * GRID_SIZE, panel.y + j * GRID_SIZE); var target = self.getPanel(pos); target &amp;amp;&amp;amp; self.openPanel(target); }); }); } }, 周りに爆弾がない場合、現在のパネルを起点にしてgetPanelを再帰呼び出しします。 今回の変更点はこれだけです。
今回はここまで ここまでで、パネルを連鎖で開くことができるようになりました。 段々と形になってきたと思いますが、爆弾も開けたりと全然ゲームになっていません。 次回は、ゲームオーバーとクリア処理を追加します。</description>
    </item>
    
    <item>
      <title>【phina.js】ゲーム作成チュートリアル（マインスイーパー）=第3回 パネルを開く=</title>
      <link>https://alkn203.github.io/blog/2020/10/16/minesweeper-03/</link>
      <pubDate>Fri, 16 Oct 2020 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2020/10/16/minesweeper-03/</guid>
      <description>今回の目標 前回はランダムに爆弾を配置しました。今回はパネルを開いて周りにある爆弾の数が表示されるようにします。
今回のコード phina.globalize(); // 定数 var SCREEN_WIDTH = 640; // 画面横サイズ var PANEL_NUM_XY = 9; // 縦横のパネル数 var GRID_SIZE = (SCREEN_WIDTH - 10) / PANEL_NUM_XY; // グリッドのサイズ var SCREEN_HEIGHT = GRID_SIZE * 11; // 画面縦サイズ var PANEL_SIZE = GRID_SIZE * 0.9; // パネルの大きさ var PANEL_OFFSET = (GRID_SIZE + 10) / 2; // オフセット値 var BOMB_NUM = 10; // 爆弾数 // メインシーン phina.define(&amp;#39;MainScene&amp;#39;, { superClass: &amp;#39;DisplayScene&amp;#39;, // コンストラクタ  init: function() { // 親クラス初期化  this.</description>
    </item>
    
    <item>
      <title>【phina.js】ゲーム作成チュートリアル（マインスイーパー）=第2回 爆弾の配置=</title>
      <link>https://alkn203.github.io/blog/2020/10/11/minesweeper-02/</link>
      <pubDate>Sun, 11 Oct 2020 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2020/10/11/minesweeper-02/</guid>
      <description>今回の目標 前回はパネルをグリッド状に配置しました。今回はマインスイーパーの主役とも言える爆弾を配置します。爆弾はランダムな場所に配置されるようにします。
今回のコード phina.globalize(); // 定数 var SCREEN_WIDTH = 640; // 画面横サイズ var PANEL_NUM_XY = 9; // 縦横のパネル数 var GRID_SIZE = (SCREEN_WIDTH - 10) / PANEL_NUM_XY; // グリッドのサイズ var SCREEN_HEIGHT = GRID_SIZE * 11; // 画面縦サイズ var PANEL_SIZE = GRID_SIZE * 0.9; // パネルの大きさ var PANEL_OFFSET = (GRID_SIZE + 10) / 2; // オフセット値 var BOMB_NUM = 10; // 爆弾数 // メインシーン phina.define(&amp;#39;MainScene&amp;#39;, { superClass: &amp;#39;DisplayScene&amp;#39;, // コンストラクタ  init: function() { // 親クラス初期化  this.</description>
    </item>
    
    <item>
      <title>【phina.js】ゲーム作成チュートリアル（マインスイーパー）=第1回 パネルの配置=</title>
      <link>https://alkn203.github.io/blog/2020/10/10/minesweeper-01/</link>
      <pubDate>Sat, 10 Oct 2020 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2020/10/10/minesweeper-01/</guid>
      <description>はじめに 本チュートリアルは、「phina.jsでのゲーム作り」を少しは知っているということを前提にしています。
今回の目標 以下のようにパネルを並べます。
今回のコード phina.globalize(); // 定数 var SCREEN_WIDTH = 640; // 画面横サイズ var PANEL_NUM_XY = 9; // 縦横のパネル数 var GRID_SIZE = (SCREEN_WIDTH - 10) / PANEL_NUM_XY; // グリッドのサイズ var SCREEN_HEIGHT = GRID_SIZE * 11; // 画面縦サイズ var PANEL_SIZE = GRID_SIZE * 0.9; // パネルの大きさ var PANEL_OFFSET = (GRID_SIZE + 10) / 2; // オフセット値 // メインシーン phina.define(&amp;#39;MainScene&amp;#39;, { superClass: &amp;#39;DisplayScene&amp;#39;, // コンストラクタ  init: function() { // 親クラス初期化  this.</description>
    </item>
    
  </channel>
</rss>
