<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tweener on Keep On Coding</title>
    <link>https://alkn203.github.io/blog/tags/tweener/</link>
    <description>Recent content in Tweener on Keep On Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 02 Jul 2019 20:55:06 +0900</lastBuildDate>
    
	<atom:link href="https://alkn203.github.io/blog/tags/tweener/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【phina.js】Tweenerとupdateを使ってShapeの色を変化させる</title>
      <link>https://alkn203.github.io/blog/posts/tips/phina-tweener-color/</link>
      <pubDate>Tue, 02 Jul 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/posts/tips/phina-tweener-color/</guid>
      <description>はじめに phina.jsのTweenerはキャラクターの動きをコントロールする場合などに使えるとても勉強な機能です。今回は、Tweenerとupdateを併用したTipsを紹介します。
Shapeの色変化アニメーション Shapeの色を一定時間で変化させるアニメーションを作ります。方法は以下のとおりです。
 Shapeにrgbの3つのプロパティを追加する。 Shapeのtweenerでプロパティの値を変化させる。 Shapeのupdateでプロパティの値を使って色を変化させる。  プロパティを追加する javascriptは、後から好きな時にプロパティを追加できる柔軟さを持ってますので、これを利用します。
// shape var shape = StarShape().addChildTo(this); shape.setPosition(this.gridX.center(), this.gridY.center()); shape.radius = 128; // プロパティ追加 shape.r = 0; shape.g = 0; shape.b = 0;  プロパティ値を変化させる 追加したプロパティ値をtweenerで変化させます。
// プロパティ値変化 shape.tweener.to({r: 10, g: 100, b: 200}, 2000) .to({r: 200, g: 200, b: 10}, 2000) .setLoop(true).play();  色を変化させる  updateでShapeの塗りつぶし色であるfillにプロパティ値を代入します。 rgbは文字列指定する必要があるため、formatメソッドの引数から渡しています。  // 毎フレーム処理 shape.update = function() { // 色指定 shape.fill = &#39;rgb({0}, {1}, {2})&#39;.</description>
    </item>
    
    <item>
      <title>【phina.js】パスに沿ったオブジェクト移動</title>
      <link>https://alkn203.github.io/blog/posts/tips/phina-movealongpath/</link>
      <pubDate>Fri, 14 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/posts/tips/phina-movealongpath/</guid>
      <description> パスに沿ったオブジェクトの移動 ゲームを作成していると、動く床などのように一定のルートに従ってオブジェクトを移動させたい時があると思います。 phina.jsを使って、自分なりにその処理を実装してみました。
動作サンプル まずは以下のサンプルをご覧下さい。線に沿ってオブジェクトが移動します。
 runstantで確認
 オブジェクトの移動には、非同期処理が行えるtweenerを利用します。 tweenerの内部処理で使われている_add関数で処理をスタックさせています。 tweenerは、基本的にスタックされた順に非同期処理されるので、次の移動先である各頂点の位置を順番に与えることで、結果としてパスに沿った移動が可能になります。  課題  今回のサンプルでは、移動速度が一定になるように各頂点の距離が同一になるように配置しています。 一定の時間で移動させるのがtweenerの処理ですので、距離が変わると移動速度も変わることになります。 各頂点の距離に応じてdurationを変えると速度を一定にすることが可能になると思われますが、その辺は次回の課題にしたいと思います。  </description>
    </item>
    
  </channel>
</rss>