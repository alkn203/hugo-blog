<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flow on Keep Coding</title>
    <link>https://alkn203.github.io/blog/tags/flow/</link>
    <description>Recent content in Flow on Keep Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 12 Dec 2016 00:01:08 +0900</lastBuildDate>
    <atom:link href="https://alkn203.github.io/blog/tags/flow/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Flowを使った非同期処理の基本</title>
      <link>https://alkn203.github.io/blog/2016/12/12/phina-advent-12th</link>
      <pubDate>Mon, 12 Dec 2016 00:01:08 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2016/12/12/phina-advent-12th</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;この記事は、&lt;a href=&#34;http://qiita.com/advent-calendar/2016/phinajs&#34;&gt;phina.js Advent Calendar 2016&lt;/a&gt; の12日目の記事です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;11日目：&lt;a href=&#34;http://qiita.com/tamochu3141/items/8094aec3348dc9a6ae9d&#34;&gt;phina.jsでの多人数参加型ゲームの作製 by tamochu3141さん&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;13日目：&lt;a href=&#34;http://qiita.com/minimo/items/27020fdb66375f1f868b&#34;&gt;phina.jsでGamePadを使う by minimoさん&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;非同期処理&#34;&gt;非同期処理&lt;/h2&gt;

&lt;p&gt;基本的にプログラムはソースに書かれたの順序で実行されます。これは一般的に&lt;strong&gt;同期処理&lt;/strong&gt;と呼んでいます。
一方で、処理の一部を特定の処理が終わるまで待ってから実行するなど、書かれた順序に依存しない処理を&lt;strong&gt;非同期処理&lt;/strong&gt;と呼んでおり、時間のかかる処理をバックグランドで実行させておく場合になどによく使用されます。&lt;/p&gt;

&lt;h2 id=&#34;flowとは&#34;&gt;Flowとは&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;phina.js&lt;/strong&gt;には、&lt;strong&gt;Flow&lt;/strong&gt;という非同期処理を実装するためのクラスが用意されています。&lt;strong&gt;javascript&lt;/strong&gt;に詳しい人なら、&lt;strong&gt;EcmaScript6&lt;/strong&gt;の&lt;strong&gt;Promise&lt;/strong&gt;と言えばピンと来るかもしれません。(そう言う私もそれほど詳しくありませんが）
&lt;strong&gt;Flow&lt;/strong&gt;はその&lt;strong&gt;Promise&lt;/strong&gt;と基本的に同じ機能を&lt;strong&gt;phina.js&lt;/strong&gt;で実装したものです。&lt;strong&gt;tmlib.js&lt;/strong&gt;時代も&lt;strong&gt;Flow&lt;/strong&gt;というクラス自体はありましたが、中身は大幅に違っています。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/phina-advent-12th.png&#34; alt=&#34;15puzzle-tut-2&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;flowの使い方&#34;&gt;Flowの使い方&lt;/h2&gt;

&lt;p&gt;では、早速使い方を見ていきましょう。
以下がサンプルコードです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;phina.globalize();
// メインシーン
phina.define(&#39;MainScene&#39;, {
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景色
    this.backgroundColor = &#39;black&#39;;
  
    var self = this;
    var duration = 2000;
    // flow設定
    var flow = Flow(function(resolve) {
      RectangleShape()
        .addChildTo(self)
        .setPosition(self.gridX.center(), 0)
        .tweener.to({y: self.gridY.center()}, duration)
        .call(function() {
          resolve();
        });
    });

    var rect = RectangleShape().addChildTo(this);
    rect.setPosition(self.gridX.center(1), self.gridY.center(1));
    // 非同期処理(resoveで呼ばれる)
    flow.then(function() {
      rect.tweener.to({y: self.gridY.width}, duration).play();
    });
    // 同期処理
    RectangleShape()
      .addChildTo(self)
      .setPosition(self.gridX.center(-1), self.gridY.center(1))
      .tweener.to({y: self.gridY.width}, duration);
  },
});
// メイン
phina.main(function() {
  var app = GameApp({
    startLabel: &#39;main&#39;,
  });
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/017e556a&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;実行すると、左下の矩形は実行と同時に下に移動しますが、右下の矩形は上の矩形が止まってから移動を開始します。&lt;/p&gt;

&lt;h2 id=&#34;コード説明&#34;&gt;コード説明&lt;/h2&gt;

&lt;h3 id=&#34;flowの設定&#34;&gt;Flowの設定&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// flow設定
var flow = Flow(function(resolve) {
  RectangleShape()
    .addChildTo(self)
    .setPosition(self.gridX.center(), 0)
    .tweener.to({y: self.gridY.center()}, duration)
    .call(function() {
      resolve(&#39;flow done&#39;);
      console.log(message);
    }).play();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;非同期で実行したい処理を&lt;strong&gt;Flow&lt;/strong&gt;内に記述します。&lt;/li&gt;
&lt;li&gt;処理が終わった後は、&lt;strong&gt;resolve&lt;/strong&gt;を呼び出します。&lt;/li&gt;
&lt;li&gt;上の例では、&lt;strong&gt;tweener&lt;/strong&gt;を使って一定時間かけて画面中央まで移動した後に、&lt;strong&gt;resolve&lt;/strong&gt;をコールするようにしています。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;後処理の記述&#34;&gt;後処理の記述&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// resoveで実行される
flow.then(function() {
  rect.tweener.to({y: self.gridY.width}, duration).play();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;resolve&lt;/strong&gt;が呼ばれると、&lt;strong&gt;Flow&lt;/strong&gt;クラスのメソッド&lt;strong&gt;then&lt;/strong&gt;が実行されるため、この中に後から実行したい処理を記述します。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;複数のflowを取り扱う&#34;&gt;複数のFlowを取り扱う&lt;/h3&gt;

&lt;p&gt;これまでは1つの&lt;strong&gt;Flow&lt;/strong&gt;オブジェクトを取り扱ってきました。
1つであれば&lt;strong&gt;tweener&lt;/strong&gt;を使えば似たような処理が出来なくもないですが、さらに&lt;strong&gt;Flow&lt;/strong&gt;では複数の非同期処理をウォッチすることができます。
サンプルコードは以下のとおりです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;phina.globalize();
// メインシーン
phina.define(&#39;MainScene&#39;, {
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景色
    this.backgroundColor = &#39;black&#39;;
  
    var self = this;
    var flows = [];
    
    (10).times(function(i) {
      // flow作成
      var flow = Flow(function(resolve) {
        var x = Random.randint(64, self.gridX.width - 64);
        var y = Random.randint(64, self.gridY.width - 64);
        var duration = Random.randint(500, 5000); 
        // ランダムな位置に円を作成
        CircleShape()
          .addChildTo(self)
          .setPosition(x, y)
          .tweener.fadeOut(duration) // フェードアウト
          .call(function() {
            resolve(i + &#39;done&#39;);
          }).play();
        });
        // 配列に追加
        flows.push(flow);
    });
    // 全てのflow実行後
    Flow.all(flows).then(function(messages) {
      console.log(&#39;all done!&#39;, messages);
    });
  },
});
// メイン
phina.main(function() {
  var app = GameApp({
    startLabel: &#39;main&#39;,
  });
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/9665202b&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;実行すると、ランダムな位置に円が表示されランダムな時間でフェードアウトします。&lt;/li&gt;
&lt;li&gt;最後の円がフェードアウトしてから、メッセージがコンソールに表示されます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;コード説明-1&#34;&gt;コード説明&lt;/h2&gt;

&lt;h3 id=&#34;flowの配列を作って追加する&#34;&gt;Flowの配列を作って追加する&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var flows = [];

(10).times(function(i) {
  // flow作成
  var flow = Flow(function(resolve) {
    var x = Random.randint(64, self.gridX.width - 64);
    var y = Random.randint(64, self.gridY.width - 64);
    var duration = Random.randint(500, 5000); 
    // ランダムな位置に円を作成
    CircleShape()
      .addChildTo(self)
      .setPosition(x, y)
      .tweener.fadeOut(duration) // フェードアウト
      .call(function() {
        resolve(i + &#39;done&#39;);
      }).play();
    });
    // 配列に追加
    flows.push(flow);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flow&lt;/strong&gt;を格納する配列を作って&lt;strong&gt;push&lt;/strong&gt;しています。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;flow-allで全てのflowをウォッチ&#34;&gt;Flow.allで全てのFlowをウォッチ&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// 全てのflow実行後
Flow.all(flows).then(function(messages) {
  console.log(&#39;all done!&#39;, messages);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flow.all&lt;/strong&gt;の引数にウォッチしたい&lt;strong&gt;Flow&lt;/strong&gt;の配列を代入すると、与えれられた全ての非同期処理の終了をウォッチすることができます。&lt;/li&gt;
&lt;li&gt;今回は配列でまとめて代入しましたが、個々に&lt;strong&gt;Flow&lt;/strong&gt;を作成して代入することもできます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;説明不足のところもあるかもしれませんが、今回紹介した&lt;strong&gt;Flow&lt;/strong&gt;を使うことによって、&lt;strong&gt;phina.js&lt;/strong&gt;における非同期処理をよりスマートにコーディングすることができると思いますので、皆も色々と試してみて下さい。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>