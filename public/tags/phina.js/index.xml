<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Phina.js on Keep On Coding</title>
    <link>https://alkn203.github.io/blog/tags/phina.js/</link>
    <description>Recent content in Phina.js on Keep On Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 16 Jun 2019 20:55:06 +0900</lastBuildDate>
    
	<atom:link href="https://alkn203.github.io/blog/tags/phina.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【phina.js】バブルソートを視覚化してみた</title>
      <link>https://alkn203.github.io/blog/posts/others/phina-bubblesort/</link>
      <pubDate>Sun, 16 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/posts/others/phina-bubblesort/</guid>
      <description>バブルソートとは プログラミングを習うと必ずと言って良いほど、最初に出てくるソートアルゴリズムです。 今回のコードは、phina.jsでそれを視覚化してみたものです。 要素が入れ替わる様子が何となく分かるかと思います。
実行サンプル  コード バブルソート視覚化(runstant)
参考にしたサイト バブルソート</description>
    </item>
    
    <item>
      <title>【phina.js】色々なスクロールを試す</title>
      <link>https://alkn203.github.io/blog/posts/tips/phina-various-scroll/</link>
      <pubDate>Sat, 15 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/posts/tips/phina-various-scroll/</guid>
      <description>はじめに 横スクロールアクションゲームでは、画面のスクロール処理が欠かせませんが、スクロール１つでも結構奥が深いです。今回はphina.jsで主だったスクロール処理を実装してみました。
プレイヤー固定スクロール まずは以下のサンプルを確認してみて下さい。 プレイヤーの位置は画面の中心固定で画面がスクロールします。画面タッチでプレイヤーがジャンプして、障害物に当たると反転移動します。 中心には分かりやすいようにラインを表示しています。
 runstantで確認
このパターンのスクロールは、特に難しい実装はないかと思います。 プレイヤーは動かさずに固定して、プレイヤー以外のオブジェクトをプレイヤーの移動方向と逆向きに動かすことで、プレイヤーが移動しているように見えます。
// 画面スクロール moveX: function() { var self = this; this.objectGroup.children.each(function(obj) { obj.x += -self.player.vx; }); },  変則スクロール 始めは固定スクロールと同じようにスクロールしますが、ステージの端に行くとスクロールが止まります。 そして、画面中央を超えると再びスクロールします。
 runstantで確認
このパターンのスクロールのポイントは、プレイヤー以外のオブジェクトの移動とプレイヤーのみの移動の切り替えです。 プレイヤーの横方向の状態をチェックする関数を用意して、その中で切り替えを行います。
// 横方向の状態チェック checkHorizontalState: function() { var player = this.player; var state = this.player.horizontalState; // 左端のオブジェクト var first = this.objectGroup.children.first; // 右端のオブジェクト var last = this.objectGroup.children.last; // プレイヤーの状態で分ける switch (state) { // 左移動中 case &#39;MOVING_LEFT&#39;: // ヒットしたら反転 if (this.</description>
    </item>
    
    <item>
      <title>【phina.js】パスに沿ったオブジェクト移動</title>
      <link>https://alkn203.github.io/blog/posts/tips/phina-movealongpath/</link>
      <pubDate>Fri, 14 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/posts/tips/phina-movealongpath/</guid>
      <description> パスに沿ったオブジェクトの移動 ゲームを作成していると、動く床などのように一定のルートに従ってオブジェクトを移動させたい時があると思います。 phina.jsを使って、自分なりにその処理を実装してみました。
動作サンプル まずは以下のサンプルをご覧下さい。線に沿ってオブジェクトが移動します。
 runstantで確認
 オブジェクトの移動には、非同期処理が行えるtweenerを利用します。 tweenerの内部処理で使われている_add関数で処理をスタックさせています。 tweenerは、基本的にスタックされた順に非同期処理されるので、次の移動先である各頂点の位置を順番に与えることで、結果としてパスに沿った移動が可能になります。  課題  今回のサンプルでは、移動速度が一定になるように各頂点の距離が同一になるように配置しています。 一定の時間で移動させるのがtweenerの処理ですので、距離が変わると移動速度も変わることになります。 各頂点の距離に応じてdurationを変えると速度を一定にすることが可能になると思われますが、その辺は次回の課題にしたいと思います。  </description>
    </item>
    
    <item>
      <title>【phina.js】上方向だけすり抜ける床を作る</title>
      <link>https://alkn203.github.io/blog/posts/tips/phina-up-direction/</link>
      <pubDate>Thu, 13 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/posts/tips/phina-up-direction/</guid>
      <description>上方向だけすり抜ける床  ジャンプゲームなどでは、上方向にすり抜け下方向にはすり抜けない床がよくあります。 今回は基本的なジャンプ処理とともに、phina.jsを使って自分なりに実装してみました。  動作サンプル まずは以下のサンプルを確認して下さい。 画面タッチでキャラがジャンプしますが、上方向にはブロックをすり抜けて、その後に下のブロックに着地します。
 runstantで確認
プレイヤーとブロックの作成 プレイヤーとブロックは、それぞれSpriteクラスを継承して作成しました。
// プレイヤークラス phina.define(&#39;Player&#39;, { superClass: &#39;Sprite&#39;, // コンストラクタ init: function() { // 親クラス初期化 this.superInit(&#39;tomapiko&#39;, SPRITE_SIZE, SPRITE_SIZE); // フレームアニメーションをアタッチ this.anim = FrameAnimation(&#39;tomapiko_ss&#39;).attachTo(this); // スプライトシートのサイズにフィットさせない this.anim.fit = false; // 縦移動速度 this.vy = 0; // サイズ変更 this.setSize(CHARA_SIZE, CHARA_SIZE); },   デフォルトのスプライトサイズから半分のサイズにしています。 FrameAnimationクラスのプロパティfitをfalseにしないと、スプライトシートに書いている切り出しサイズが適用されるので注意して下さい。  // ブロッククラス phina.define(&#39;Block&#39;, { superClass: &#39;Sprite&#39;, // コンストラクタ init: function() { // 親クラス初期化 this.superInit(&#39;tiles&#39;, SPRITE_SIZE, SPRITE_SIZE); // タイルセットの指定フレームを表示 this.</description>
    </item>
    
    <item>
      <title>【phina.js】シンプルなタイピングゲームを作ってみた</title>
      <link>https://alkn203.github.io/blog/posts/works/keywordshot/</link>
      <pubDate>Wed, 12 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/posts/works/keywordshot/</guid>
      <description>はじめに phina.jsでシンプルなタイピングゲームを作ってみました。 私はあまりタイピングは得意な方ではないので、自分で作っておきながら途中でゲームオーバーになりますが、皆さんはいかがでしょうか。
 別画面でプレイする
 画面左から飛んでくるhtmlやjavascriptに関するキーワードをタイプするだけのゲームです。 大文字小文字は区別しません。  改定 2019/5/18 ライフ制導入
カスタマイズ キーワード一覧は、以下のように改行区切りのテキストファイルからアセットとして読み込んでいますので、中身を変えれば 別言語のキーワードなどもイケると思います。
// アセット var ASSETS = { // キーワード一覧 text: { &#39;keywords&#39;: &#39;https://cdn.jsdelivr.net/gh/alkn203/phina-games@master/keyword-shot/assets/keywords&#39;, }, };  リファレンス キーワード一覧は、以下のサイトから引用させて頂きました。ありがとうございます。 JavaScriptのキーワードとか予約語をかき集めてみた - Born Neet</description>
    </item>
    
    <item>
      <title>phina.js事始め</title>
      <link>https://alkn203.github.io/blog/posts/others/about-phina/</link>
      <pubDate>Tue, 11 Jun 2019 20:55:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/posts/others/about-phina/</guid>
      <description>（ロゴはphinajs.comから借用）
phina.jsについて 私が日々楽しんで使っているjavascriptのゲームライブラリで、tmlib.jsの後継のライブラリになります。現在開発はphina.jsの方にシフトしています。 とりあえずどのようなものか知るためには、以下の紹介記事辺りが参考になるかと思います。
 本日 JavaScript ゲームライブラリ『phina.js』をリリースしました! by @phi さん phina.js - JavaScriptで楽しく簡単にゲームが作れるライブラリ by @simiraaaa さん phina.jsの簡単さから基礎知識まで by @axion014 さん はじめてのphina.js – JavaScriptゲームライブラリを使ってみた！ by 株式会社LIG さん  気に入っているところ 以下は主観的ですが、他のユーザーも感じているのではないかと思います。
 同じ処理でもコード量が少なく済みます。全てのゲームライブラリと比較したわけではありませんが、phina.jsで書き慣れると、個人的には同様の処理を行う他のライブラリのコードが冗長に感じるようになりました。 ソースが読みやすいです。ソースの書き方を真似ることで、結果的に自分のコードも読みやすくなりました。 実行確認までのステップが短いです。Web上でコーディングできるrunstantを使うことで、環境構築の手間をかけずに自分のプログラムが確認できます。 他に、配列やベクトルなどのコーディングする上でベースとなるクラスの機能拡張が充実しているなどが挙げられます。  とにかく使ってみたい方へ  Githubのリポジトリに導入方法が記載されていますが、開発者向けの内容に近いので、私も含めて不慣れな方には少し敷居が高いかと思います。 一番簡単なのは、runstantへのユーザー登録が必要ですが、runstantに用意されたテンプレートをForkする方法です。  質問など phina.jsの魅力の一つに、親切なサポート体制があります。 Twitterで#phina_jsタグをつけて質問したり、slack(gitterから移行）に参加して質問すれば、作者の phiさんを始め、他のメンバーが優しく真剣に答えてくれます。些細なことでも良いので、構えずに質問してみて下さい。
Tipsなど どんなものか少しでも知ってもらうために、phina.js Tips集をよろしければご覧ください。
おわりに ゲームライブラリは実際に使ってみないとその良し悪しはわかりませんが、恵まれたことにphina.jsは、比較的簡単にトライすることができます。 javascriptでのゲーム開発に興味がある方は、是非一度触ってみて色々と試して頂ければと思います。</description>
    </item>
    
  </channel>
</rss>