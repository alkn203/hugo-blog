<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sprite on Keep Coding</title>
    <link>https://alkn203.github.io/blog/tags/sprite/</link>
    <description>Recent content in Sprite on Keep Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 11 Jun 2016 23:59:06 +0900</lastBuildDate>
    <atom:link href="https://alkn203.github.io/blog/tags/sprite/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>フレームアニメーション関係Tips</title>
      <link>https://alkn203.github.io/blog/2016/06/11/frameanimation-tips</link>
      <pubDate>Sat, 11 Jun 2016 23:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2016/06/11/frameanimation-tips</guid>
      <description>

&lt;h3 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h3&gt;

&lt;p&gt;以前にも紹介したように、phina.jsには&lt;strong&gt;FrameAnimation&lt;/strong&gt;という便利な機能があります。
今回はより便利に使うための2つのTipsを紹介します。&lt;/p&gt;

&lt;h3 id=&#34;スプライトのサイズがスプライトシートに定義されたサイズにフィットしないようにする&#34;&gt;スプライトのサイズがスプライトシートに定義されたサイズにフィットしないようにする&lt;/h3&gt;

&lt;p&gt;フレームアニメーションを使うためには、&lt;strong&gt;SpriteSheet&lt;/strong&gt;を定義する必要がありますが
デフォルトだと実際のコード中でスプライトのサイズを変えてもスプライトシート(json)に書かれた&lt;strong&gt;width&lt;/strong&gt;と&lt;strong&gt;height&lt;/strong&gt;に
戻ってしまい、スプライトを拡大して表示したい時に意図した結果になりません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// スプライトシート
spritesheet: {
  &#39;explosion_ss&#39;:
  {
    &amp;quot;frame&amp;quot;: {
      &amp;quot;width&amp;quot;: 20, // ←この値にフィットされる
      &amp;quot;height&amp;quot;: 20,// ←この値にフィットされる
      &amp;quot;cols&amp;quot;: 16,
      &amp;quot;rows&amp;quot;: 1,
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを回避するためには、&lt;strong&gt;FrameAnimation&lt;/strong&gt;クラスのプロパティ&lt;strong&gt;fit&lt;/strong&gt;を&lt;strong&gt;false&lt;/strong&gt;にします。
これで実際に変更したサイズで正しく表示されるようになります。
サンプルでは20X20で切り出した画像を5倍で表示しています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// 親クラスの初期化
this.superInit(&#39;explosion&#39;, 20, 20); // ←実際の画像の切り取りサイズ
// SpriteSheetをスプライトにアタッチ
var anim = FrameAnimation(&#39;explosion_ss&#39;).attachTo(this);
// スプライトシートのサイズにフィットさせない
anim.fit = false; // ←ここ
//アニメーションを再生する
anim.gotoAndPlay(&#39;start&#39;);
// サイズ変更
this.setSize(20*5, 20*5); // ←サイズ変更
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;フレームアニメーションの終了を検知する&#34;&gt;フレームアニメーションの終了を検知する&lt;/h3&gt;

&lt;p&gt;ゲーム作成において、フレームアニメーションが終了した後に何か処理をしたい時があるかと思いまます。
この場合、&lt;strong&gt;FrameAnimation&lt;/strong&gt;クラスの&lt;strong&gt;finished&lt;/strong&gt;プロパティの値が&lt;strong&gt;true&lt;/strong&gt;かどうかを調べると便利です。
サンプルでは爆発アニメーションが終了したら、自身を消去するようにしています。（consoleに結果表示）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// 毎フレーム処理
update: function() {
  // アニメーションが終わったら自身を消去
  if (this.anim.finished) { // ←ここで判定
    this.remove();
    console.log(&#39;removed&#39;);
  }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;サンプル-runstant上&#34;&gt;サンプル(runstant上)&lt;/h4&gt;

&lt;div class=&#39;runstant&#39;&gt;&lt;iframe src=&#39;http://runstant.com/alkn203/projects/e18e94bb&#39; width=&#39;100%&#39; height=&#39;640px&#39; style=&#39;border:0px;box-shadow:0px 0px 2px 0px #aaa&#39;&gt;&lt;/iframe&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Physicalクラスを利用したジャンプアクションの基本サンプル</title>
      <link>https://alkn203.github.io/blog/2016/01/29/phina-jump</link>
      <pubDate>Fri, 29 Jan 2016 23:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2016/01/29/phina-jump</guid>
      <description>

&lt;h2 id=&#34;サンプル&#34;&gt;サンプル&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;画面をタッチするとキャラクターがジャンプします。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Physical&lt;/strong&gt;クラスの&lt;strong&gt;velocity&lt;/strong&gt;と&lt;strong&gt;gravity&lt;/strong&gt;の使い分けがポイントです。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/phina-jump.png&#34; alt=&#34;phina-advent-23th&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;ソースコード&#34;&gt;ソースコード&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// アセット
var ASSETS = {
  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko_ss.png&#39;,
  },
  // フレームアニメーション情報
  spritesheet: {
    &#39;tomapiko_ss&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/tmss/tomapiko.tmss&#39;,
  },
};
// 定数
var JUMP_POWOR = 10; // ジャンプ力
var GRAVITY = 0.5; // 重力
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景
    this.backgroundColor = &#39;skyblue&#39;;

    Label({
      text: &#39;Touch To Jump&#39;,
      fontSize: 48,
      fill: &#39;gray&#39;,
    }).addChildTo(this).setPosition(this.gridX.center(), this.gridY.span(3));
    // 床
    this.floor = RectangleShape({
      width: this.gridX.width,
      height: this.gridY.span(1),
      fill: &#39;silver&#39;,
    }).addChildTo(this).setPosition(this.gridX.center(), this.gridY.center(2));
    // プレイヤー作成
    var player = Player(&#39;tomapiko&#39;).addChildTo(this);
    // 初期位置
    player.x = this.gridX.center();
    player.bottom = this.floor.top;
    // 画面タッチ時処理
    this.onpointend = function() {
      // 床の上なら
      if (player.isOnFloor) {
        // 上方向に速度を与える（ジャンプ）
        player.physical.velocity.y = -JUMP_POWOR;
        // 重力復活
        player.physical.gravity.y = GRAVITY;
        // フラグ変更
        player.isOnFloor = false;
        // アニメーション変更
        player.anim.gotoAndPlay(&#39;fly&#39;);
      }
    };
    // 参照用
    this.player = player;
  },
  // 毎フレーム処理
  update: function() {
    var player = this.player;
    // 床とヒットしたら
    if (player.hitTestElement(this.floor)) {
      // y方向の速度と重力を無効にする
      player.physical.velocity.y = 0;
      player.physical.gravity.y = 0;
      // 位置調整
      player.bottom = this.floor.top;
      // フラグ立て
      player.isOnFloor = true;
      // アニメーション変更
      player.anim.gotoAndPlay(&#39;left&#39;);
    }
  },
});
/*
 * プレイヤークラス
 */
phina.define(&#39;Player&#39;, {
  superClass: &#39;Sprite&#39;,
  // コンストラクタ
  init: function(image) {
    // 親クラス初期化
    this.superInit(image);
    // フレームアニメーションをアタッチ
    this.anim = FrameAnimation(&#39;tomapiko_ss&#39;).attachTo(this);
    // 初期アニメーション指定
    this.anim.gotoAndPlay(&#39;left&#39;);
    // 初速度を与える
    this.physical.force(-2, 0);
    // 床の上かどうか
    this.isOnFloor = true;
  },
  // 毎フレーム処理
  update: function() {
    // 画面端で速度と向き反転
    if (this.left &amp;lt; 0 || this.right &amp;gt; 640) {
      this.physical.velocity.x *= -1;
      this.scaleX *= -1;
    }
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
    // アセット読み込み
    assets: ASSETS,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/de30c997&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>フレームアニメーションのスプライトシートをコード内で定義する方法</title>
      <link>https://alkn203.github.io/blog/2015/12/20/frameanimation</link>
      <pubDate>Sun, 20 Dec 2015 23:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2015/12/20/frameanimation</guid>
      <description>

&lt;h3 id=&#34;はじめに&#34;&gt;はじめに&lt;/h3&gt;

&lt;p&gt;現在、Qiitaで&lt;a href=&#34;http://qiita.com/advent-calendar/2015/phinajs&#34;&gt;phina.js Advent Calendar 2015&lt;/a&gt;が盛り上がってます。（私も微力ながら3つ登録しました。）
そこで、個人的に側面からも盛り上げるべく、&lt;a href=&#34;http://phinajs.com/&#34;&gt;phina.js&lt;/a&gt;に関するTipsなどをこの時期に合わせて紹介したいと思います。&lt;/p&gt;

&lt;h3 id=&#34;今回のネタ&#34;&gt;今回のネタ&lt;/h3&gt;

&lt;p&gt;今回は、画像を使ったゲーム作りには欠かせないフレームアニメーションの小ネタを紹介します。
フレームアニメーションについては、以下のエントリーがとても参考になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/minimo/items/0aad94d94478845d3ce2&#34;&gt;[phina.js]SpriteSheetを使ってみよう！&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/minimo&#34;&gt;minimo&lt;/a&gt;氏&lt;/p&gt;

&lt;p&gt;上の記事に書いてあるように、フレームアニメーションで使用するスプライトシートは、基本的には外部のファイルに&lt;strong&gt;JSON&lt;/strong&gt;形式で定義して、&lt;strong&gt;phina.js&lt;/strong&gt;から&lt;strong&gt;ASSET&lt;/strong&gt;として読み込みます。これは、複数のキャラ毎にフレームアニメーションを設定する際には必須と言えます。&lt;/p&gt;

&lt;p&gt;一方、&lt;strong&gt;phina.js&lt;/strong&gt;のソースを読むと分かりますが、スプライトシートの定義は&lt;strong&gt;js&lt;/strong&gt;のコード内に直接書くこともできます。
方法は、以下のように&lt;strong&gt;ASSET&lt;/strong&gt;のスプライトシートの該当箇所に&lt;strong&gt;JSON&lt;/strong&gt;ファイルの中身を書くだけです。
この手法は、取り急ぎ１キャラずつフレームアニメーションの確認や調整をしたい場合に便利かと思います。また、&lt;strong&gt;js&lt;/strong&gt;のコード内なので、コメントを付すこともできます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var ASSETS = {
  image: {
    &#39;explosion&#39;: &#39;https://rawgit.com/alkn203/radar_touch/gh-pages/assets/explosion.png&#39;,
  },
  spritesheet: {
    &#39;explosion_ss&#39;:
    {
      &amp;quot;frame&amp;quot;: {
        &amp;quot;width&amp;quot;: 80,
        &amp;quot;height&amp;quot;: 80,
        &amp;quot;cols&amp;quot;: 8,
        &amp;quot;rows&amp;quot;: 1,
      },
      // アニメーション
      &amp;quot;animations&amp;quot; : {
        &amp;quot;start&amp;quot;: {
          &amp;quot;frames&amp;quot;: [0,1,2,3,4,5,6,7],
          &amp;quot;next&amp;quot;: &amp;quot;end&amp;quot;,
          &amp;quot;frequency&amp;quot;: 2,
        },
        &amp;quot;end&amp;quot;: {
          &amp;quot;frames&amp;quot;: [5,6,7],
          &amp;quot;next&amp;quot;: &amp;quot;end&amp;quot;,
          &amp;quot;frequency&amp;quot;: 5,
        }
      }
    },
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;動作サンプル&#34;&gt;動作サンプル&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/frameanimation.png&#34; alt=&#34;phina-advent-23th&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/3a8e13fb&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;まとめ&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;今回は、フレームアニメーションの小ネタについて書かせて頂きました。使い勝手が良いかは微妙なところですが、こういう手法もあるということで参考程度に受け止めて頂ければ幸いです。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>