<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Update on Keep Coding</title>
    <link>https://alkn203.github.io/blog/tags/update/</link>
    <description>Recent content in Update on Keep Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 13 May 2017 20:15:06 +0900</lastBuildDate>
    <atom:link href="https://alkn203.github.io/blog/tags/update/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Spriteを回転させる（setRotation）</title>
      <link>https://alkn203.github.io/blog/2017/05/13/rotate-sprite2</link>
      <pubDate>Sat, 13 May 2017 20:15:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/13/rotate-sprite2</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;スプライト画像の回転角度を指定する方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/rotate-sprite2.gif&#34; alt=&#34;rotate-sprite2.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/7af9afc0&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;スプライトの回転角度指定&#34;&gt;スプライトの回転角度指定&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Sprite&lt;/strong&gt;の回転角度を指定するには、&lt;strong&gt;setRotation&lt;/strong&gt;関数を使用します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// スプライト回転
sprite.setRotation(45);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;引数はラジアン(radian)ではなく&lt;strong&gt;度(degree)&lt;/strong&gt;です。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// アセット
var ASSETS = {
  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko.png&#39;,
  },
};
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景
    this.backgroundColor = &#39;skyblue&#39;;
    // スプライト画像作成
    var sprite = Sprite(&#39;tomapiko&#39;).addChildTo(this);
    // 初期位置
    sprite.x = this.gridX.center();
    sprite.y = this.gridY.center();
    // スプライト回転
    sprite.setRotation(45);
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
    // アセット読み込み
    assets: ASSETS,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Spriteを回転させる</title>
      <link>https://alkn203.github.io/blog/2017/05/12/rotate-sprite</link>
      <pubDate>Fri, 12 May 2017 20:15:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/12/rotate-sprite</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;スプライト画像を回転する方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/rotate-sprite.gif&#34; alt=&#34;rotate-sprite.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/81cfe487&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;スプライトの回転&#34;&gt;スプライトの回転&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Sprite&lt;/strong&gt;の&lt;strong&gt;update&lt;/strong&gt;関数でプロパティ&lt;strong&gt;rotation&lt;/strong&gt;の値を変更することで回転させることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    // スプライト回転
    sprite.update = function() {
      sprite.rotation++;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;今回は&lt;strong&gt;rotation&lt;/strong&gt;の値を1ずつ増やしています。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// アセット
var ASSETS = {
  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko.png&#39;,
  },
};
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景
    this.backgroundColor = &#39;skyblue&#39;;
    // スプライト作成
    var sprite = Sprite(&#39;tomapiko&#39;).addChildTo(this);
    // 初期位置
    sprite.x = this.gridX.center();
    sprite.y = this.gridY.center();
    // スプライト回転
    sprite.update = function() {
      sprite.rotation++;
    };
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
    // アセット読み込み
    assets: ASSETS,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Spriteを移動させる</title>
      <link>https://alkn203.github.io/blog/2017/05/11/move-sprite</link>
      <pubDate>Thu, 11 May 2017 20:15:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/11/move-sprite</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;スプライト画像を移動する方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/move-sprite.gif&#34; alt=&#34;move-sprite.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/bab85342&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;スプライトの移動&#34;&gt;スプライトの移動&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Sprite&lt;/strong&gt;の&lt;strong&gt;update&lt;/strong&gt;関数に座標を変更する処理を書くと、毎フレーム呼ばれるので移動させることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    // スプライト移動
    sprite.update = function() {
      sprite.moveBy(2, 1);
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;今回使った&lt;strong&gt;moveBy&lt;/strong&gt;関数は引数で与えれた数値ずつ&lt;strong&gt;x,y&lt;/strong&gt;の値を増やす処理をします。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// アセット
var ASSETS = {
  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko.png&#39;,
  },
};
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景
    this.backgroundColor = &#39;skyblue&#39;;
    // スプライト作成
    var sprite = Sprite(&#39;tomapiko&#39;).addChildTo(this);
    // 初期位置
    sprite.x = this.gridX.center();
    sprite.y = this.gridY.center();
    // スプライト移動
    sprite.update = function() {
      sprite.moveBy(2, 1);
    };
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
    // アセット読み込み
    assets: ASSETS,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Shapeの更新イベントを登録する</title>
      <link>https://alkn203.github.io/blog/2017/04/26/update-shape</link>
      <pubDate>Wed, 26 Apr 2017 00:13:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/04/26/update-shape</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Shape&lt;/strong&gt;に対してフレーム更新処理を登録する方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/update-shape.gif&#34; alt=&#34;upate-shape.gif&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;更新イベント処理-update&#34;&gt;更新イベント処理（update）&lt;/h3&gt;

&lt;p&gt;更新処理を登録するためには、&lt;strong&gt;shape&lt;/strong&gt;の&lt;strong&gt;update&lt;/strong&gt;関数を実装します。
&lt;strong&gt;update&lt;/strong&gt;関数が実装されていると、その内容が毎フレーム実行されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// 毎フレーム更新処理
shape.update = function() {
  // 移動
  shape.moveBy(1, 1);  
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/d709760f&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;更新イベント処理-on-enterframe&#34;&gt;更新イベント処理（on + enterframe）&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;では1つのメソッドしか登録できません。一方、&lt;strong&gt;on&lt;/strong&gt;と&lt;strong&gt;enterframe&lt;/strong&gt;を組み合わせると複数のメソッドを登録可能で、その内容が並行して実行されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// 毎フレーム更新処理
shape.on(&#39;enterframe&#39;, function() {
  // 移動
  shape.moveBy(1, 1);  
});
// 毎フレーム更新処理
shape.on(&#39;enterframe&#39;, function() {
  // 回転
  shape.rotation++;  
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/0705ecfc&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>