<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>array on Keep On Coding</title>
    <link>https://alkn203.github.io/blog/tags/array/</link>
    <description>Recent content in array on Keep On Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 24 Jun 2021 20:59:06 +0900</lastBuildDate><atom:link href="https://alkn203.github.io/blog/tags/array/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>phina.jsの拡張クラスを使ってみよう　ーArray編ー</title>
      <link>https://alkn203.github.io/blog/2021/06/24/array/</link>
      <pubDate>Thu, 24 Jun 2021 20:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/24/array/</guid>
      <description>はじめに phina.jsは、国産の javascript ゲームライブラリです。 ゲーム製作向けのライブラリですので、ゲーム製作を前提とした機能が充実していますが、javascript でのコーディングをより快適にするための細かな配慮がされているライブラリでもあります。その例として、今回は、javascript の基本クラスである Array の拡張メソッドを紹介したいと思います。
拡張Arrayクラス phina.js では、元々の javascript のArrayクラスに様々な拡張メソッドが追加されています。 以下に、使う機会が多いだろうと思われるメソッドを紹介します。
first 配列の最初の要素を返します。
last 配列の最後の要素を返します。
var arr = [1,2,3]; arr.first; // =&amp;gt; 1 arr.last; // =&amp;gt; 3  これらは、メソッドというよりもプロパティです。　 インデックス番号を意識しなくて良いので、参照エラーなどを回避することができます。  contains 指定された要素が配列に含まれているかどうかを調べます。
var arr = [1,2,3]; arr.contains(1); // =&amp;gt; true swap 指定されたインデックスの要素を入れ替えます。
var arr = [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;]; arr.swap(0,1); // =&amp;gt; arr = [&amp;#39;b&amp;#39;,&amp;#39;a&amp;#39;,&amp;#39;c&amp;#39;]  前後の要素を入れ替える時などに便利です。  eraseIf 引数で与えられた関数の条件に一致する最初の要素を削除します。
var arr = [1,2,3]; arr.eraseIf(function(elem) { if (elem &amp;gt; 1) { return true; } }); //=&amp;gt; arr = [1,3]  関数の中に任意の条件を設定できるので、用途の幅が広がります。  eraseIfAll 引数で与えられた関数の条件に一致する要素を全て削除します。</description>
    </item>
    
  </channel>
</rss>
