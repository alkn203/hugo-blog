<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on Keep Coding</title>
    <link>https://alkn203.github.io/blog/tags/tips/</link>
    <description>Recent content in Tips on Keep Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 22 May 2017 22:18:06 +0900</lastBuildDate>
    <atom:link href="https://alkn203.github.io/blog/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ラベルのフォントを指定する</title>
      <link>https://alkn203.github.io/blog/2017/05/22/change-label-font</link>
      <pubDate>Mon, 22 May 2017 22:18:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/22/change-label-font</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;ラベルのフォントを変える方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/change-label-font.gif&#34; alt=&#34;change-label-font.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/e2928435&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;fontfamilyプロパティでフォントを指定する&#34;&gt;fontFamilyプロパティでフォントを指定する&lt;/h3&gt;

&lt;p&gt;ラベルのフォントは&lt;strong&gt;fontFamily&lt;/strong&gt;で指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    // ラベル表示
    Label({
      text: &#39;Time is money&#39;,
      fontSize: 64,
      fill: &#39;blue&#39;,
      fontFamily: &amp;quot;&#39;Consolas&#39;, &#39;Monaco&#39;, &#39;ＭＳ ゴシック&#39;&amp;quot;,
    }).addChildTo(this).setPosition(this.gridX.center(), this.gridY.center());
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // 初期化
  init: function() {
    // 親クラス初期化
    this.superInit();
    // ラベル表示
    Label({
      text: &#39;Time is money&#39;,
      fontSize: 64,
      fill: &#39;blue&#39;,
      fontFamily: &amp;quot;&#39;Consolas&#39;, &#39;Monaco&#39;, &#39;ＭＳ ゴシック&#39;&amp;quot;,
    }).addChildTo(this).setPosition(this.gridX.center(), this.gridY.center());
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ラベルの文字色を指定する</title>
      <link>https://alkn203.github.io/blog/2017/05/22/change-label-color</link>
      <pubDate>Mon, 22 May 2017 22:17:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/22/change-label-color</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;ラベルの文字色を変える方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/change-label-color.gif&#34; alt=&#34;change-label-color.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/3e5bcda5&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;fillプロパティで色を指定する&#34;&gt;fillプロパティで色を指定する&lt;/h3&gt;

&lt;p&gt;ラベルの文字色は&lt;strong&gt;fill&lt;/strong&gt;で指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ラベル表示
    Label({
      text: &#39;Time is money&#39;,
      fontSize: 64,
      fill: &#39;blue&#39;,
    }).addChildTo(this).setPosition(this.gridX.center(), this.gridY.center());
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
// グローバルに展開
phina.globalize();
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // 初期化
  init: function() {
    // 親クラス初期化
    this.superInit();
    // ラベル表示
    Label({
      text: &#39;Time is money&#39;,
      fontSize: 64,
      fill: &#39;blue&#39;,
    }).addChildTo(this).setPosition(this.gridX.center(), this.gridY.center());
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ラベル(文字)を表示する</title>
      <link>https://alkn203.github.io/blog/2017/05/22/show-label</link>
      <pubDate>Mon, 22 May 2017 22:16:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/22/show-label</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;ゲーム制作には欠かせない&lt;strong&gt;ラベル&lt;/strong&gt;を表示する方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/show-label.gif&#34; alt=&#34;show-label.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/d23ea2d3&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;上のサンプルでは、スプライトをタッチする度に速度が遅くなっていきます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;labelクラスを使ってラベル-文字-を表示する&#34;&gt;Labelクラスを使ってラベル（文字）を表示する&lt;/h3&gt;

&lt;p&gt;以下がラベルを画面の中心に表示するコード例です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    // ラベル表示
    Label({
      text: &#39;Time is money&#39;,
      fontSize: 64,
    }).addChildTo(this).setPosition(this.gridX.center(), this.gridY.center());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;text&lt;/strong&gt;プロパティが表示する文字です。他に&lt;strong&gt;fontSize&lt;/strong&gt;、&lt;strong&gt;fontWeight&lt;/strong&gt;、&lt;strong&gt;fontFamily&lt;/strong&gt;などのプロパティがあります。&lt;/p&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // 初期化
  init: function() {
    // 親クラス初期化
    this.superInit();
    // ラベル表示
    Label({
      text: &#39;Time is money&#39;,
      fontSize: 64,
    }).addChildTo(this).setPosition(this.gridX.center(), this.gridY.center());
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>フレームアニメーション速度を動的に変更する</title>
      <link>https://alkn203.github.io/blog/2017/05/22/change-anim-speed</link>
      <pubDate>Mon, 22 May 2017 22:15:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/22/change-anim-speed</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;外部ファイルとして読み込まれたフレームアニメーション設定を後から変更する方法について説明します。
今回はフレームアニメーションの速度を変更します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/change-anim-speed.gif&#34; alt=&#34;change-anim-speed.gif&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;下のサンプルでは、スプライトをタッチする度に速度が遅くなっていきます。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/d13981a6&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;フレームアニメーション設定を外部ファイルに定義&#34;&gt;フレームアニメーション設定を外部ファイルに定義&lt;/h3&gt;

&lt;p&gt;フレームアニメーション設定は外部ファイルとして定義して、アセットとして読み込むこともできます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// フレームアニメーション情報
  spritesheet: {
    &#39;tomapiko_ss&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/tmss/tomapiko.tmss&#39;,
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;アニメーションのfreaquencyプロパティ&#34;&gt;アニメーションのfreaquencyプロパティ&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;      // アニメーション速度変更
      anim.ss.getAnimation(&#39;left&#39;).frequency += 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;anim&lt;/strong&gt;を&lt;strong&gt;FrameAnimation&lt;/strong&gt;クラスのインスタンスとした場合、&lt;strong&gt;ss&lt;/strong&gt;で&lt;strong&gt;SpriteSheet&lt;/strong&gt;を参照することができます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getAnimation&lt;/strong&gt;で指定したアニメーションを参照することができるので、そのプロパティ&lt;strong&gt;freaquency&lt;/strong&gt;の値を変更します。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// アセット
var ASSETS = {
  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko_ss.png&#39;,
  },
  // フレームアニメーション情報
  spritesheet: {
    &#39;tomapiko_ss&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/tmss/tomapiko.tmss&#39;,
  },
};
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景
    this.backgroundColor = &#39;skyblue&#39;;
    // スプライト画像作成
    var sprite = Sprite(&#39;tomapiko&#39;, 64, 64).addChildTo(this);
    // スプライトにフレームアニメーションをアタッチ
    var anim = FrameAnimation(&#39;tomapiko_ss&#39;).attachTo(sprite);
    // アニメーションを指定する
    anim.gotoAndPlay(&#39;left&#39;);
    // 初期位置
    sprite.x = this.gridX.center();
    sprite.y = this.gridY.center();
    // タッチを有効に
    sprite.setInteractive(true);
    // スプライトのタッチ処理
    sprite.onpointend = function() {
      // アニメーション速度変更
      anim.ss.getAnimation(&#39;left&#39;).frequency += 1;
    };
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
    // アセット読み込み
    assets: ASSETS,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sprite の進行方向に応じて表示する向きを変更する</title>
      <link>https://alkn203.github.io/blog/2017/05/22/reverse-sprite-dir</link>
      <pubDate>Mon, 22 May 2017 21:15:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/22/reverse-sprite-dir</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;前回のTipsでは、スプライトは右に移動しても左方向を向いたままです。
そこで今回は、スプライトの向きと移動方向が一致するようにします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/reverse-sprite-dir.gif&#34; alt=&#34;reverse-sprite-dir.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/3e687aa0&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;スプライトと画面端との判定&#34;&gt;スプライトと画面端との判定&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;関数内に処理を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    // 更新イベント
    sprite.update = function() {
      // 移動
      sprite.x += sprite.vx;
      // 画面端との判定
      if (sprite.left &amp;lt; 0 || 640 &amp;lt; sprite.right) {
        // 速度を反転する
        sprite.vx *= -1;
        // 向きを反転する
        sprite.scaleX *= -1;
      }
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;付け加えたのは1行だけで、&lt;strong&gt;sprite.scaleX *= -1&lt;/strong&gt;とすることで向きを反転させることができます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// アセット
var ASSETS = {
  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko_ss.png&#39;,
  },
  // スプライトシート
  spritesheet: {
    &amp;quot;tomapiko_ss&amp;quot;:
    {
      // フレーム情報
      &amp;quot;frame&amp;quot;: {
        &amp;quot;width&amp;quot;: 64, // 1フレームの画像サイズ（横）
        &amp;quot;height&amp;quot;: 64, // 1フレームの画像サイズ（縦）
        &amp;quot;cols&amp;quot;: 6, // フレーム数（横）
        &amp;quot;rows&amp;quot;: 3, // フレーム数（縦）
      },
      // アニメーション情報
      &amp;quot;animations&amp;quot; : {
        &amp;quot;walk&amp;quot;: { // アニメーション名
          &amp;quot;frames&amp;quot;: [12,13,14], // フレーム番号範囲
          &amp;quot;next&amp;quot;: &amp;quot;walk&amp;quot;, // 次のアニメーション
          &amp;quot;frequency&amp;quot;: 6, // アニメーション間隔
        },
      }
    },
  }
};
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景
    this.backgroundColor = &#39;skyblue&#39;;
    // スプライト画像作成
    var sprite = Sprite(&#39;tomapiko&#39;, 64, 64).addChildTo(this);
    // スプライトにフレームアニメーションをアタッチ
    var anim = FrameAnimation(&#39;tomapiko_ss&#39;).attachTo(sprite);
    // アニメーションを指定する
    anim.gotoAndPlay(&#39;walk&#39;);
    // 初期位置
    sprite.x = this.gridX.center();
    sprite.y = this.gridY.center();
    // 初期速度
    sprite.vx = -2;
    // 更新イベント
    sprite.update = function() {
      // 移動
      sprite.x += sprite.vx;
      // 画面端との判定
      if (sprite.left &amp;lt; 0 || 640 &amp;lt; sprite.right) {
        // 速度を反転する
        sprite.vx *= -1;
        // 向きを反転する
        sprite.scaleX *= -1;
      }
    };
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
    // アセット読み込み
    assets: ASSETS,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Spriteを画面外に出ないように制御する</title>
      <link>https://alkn203.github.io/blog/2017/05/20/bounce-move-sprite</link>
      <pubDate>Sat, 20 May 2017 21:15:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/20/bounce-move-sprite</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;前回のTipsではスプライトは左に向かって移動しますが、最後は画面端から消えてしまいます。そこで今回は、スプライトを画面外に出ないように制御する方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/bounce-move-sprite.gif&#34; alt=&#34;bounce-move-sprite.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/d62ea254&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;スプライトと画面端との判定&#34;&gt;スプライトと画面端との判定&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;関数内に処理を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    // 初期速度
    sprite.vx = -2;
    // 更新イベント
    sprite.update = function() {
      // 移動
      sprite.x += sprite.vx;
      // 画面端との判定
      if (sprite.left &amp;lt; 0 || 640 &amp;lt; sprite.right) {
        // 速度を反転する
        sprite.vx *= -1;
      }
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;関数の前で、後に計算し易いように初期速度を&lt;strong&gt;vx&lt;/strong&gt;という変数に一旦入れます。&lt;/li&gt;
&lt;li&gt;画面左端は&lt;strong&gt;0&lt;/strong&gt;で、デフォルトで右端は&lt;strong&gt;640&lt;/strong&gt;ですので、スプライトの&lt;strong&gt;left&lt;/strong&gt;と&lt;strong&gt;right&lt;/strong&gt;でそれぞれ判定して、いずれかを超えた場合は速度を反転するようにしています。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// アセット
var ASSETS = {
  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko_ss.png&#39;,
  },
  // スプライトシート
  spritesheet: {
    &amp;quot;tomapiko_ss&amp;quot;:
    {
      // フレーム情報
      &amp;quot;frame&amp;quot;: {
        &amp;quot;width&amp;quot;: 64, // 1フレームの画像サイズ（横）
        &amp;quot;height&amp;quot;: 64, // 1フレームの画像サイズ（縦）
        &amp;quot;cols&amp;quot;: 6, // フレーム数（横）
        &amp;quot;rows&amp;quot;: 3, // フレーム数（縦）
      },
      // アニメーション情報
      &amp;quot;animations&amp;quot; : {
        &amp;quot;walk&amp;quot;: { // アニメーション名
          &amp;quot;frames&amp;quot;: [12,13,14], // フレーム番号範囲
          &amp;quot;next&amp;quot;: &amp;quot;walk&amp;quot;, // 次のアニメーション
          &amp;quot;frequency&amp;quot;: 6, // アニメーション間隔
        },
      }
    },
  }
};
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景
    this.backgroundColor = &#39;skyblue&#39;;
    // スプライト画像作成
    var sprite = Sprite(&#39;tomapiko&#39;, 64, 64).addChildTo(this);
    // スプライトにフレームアニメーションをアタッチ
    var anim = FrameAnimation(&#39;tomapiko_ss&#39;).attachTo(sprite);
    // アニメーションを指定する
    anim.gotoAndPlay(&#39;walk&#39;);
    // 初期位置
    sprite.x = this.gridX.center();
    sprite.y = this.gridY.center();
    // 初期速度
    sprite.vx = -2;
    // 更新イベント
    sprite.update = function() {
      // 移動
      sprite.x += sprite.vx;
      // 画面端との判定
      if (sprite.left &amp;lt; 0 || 640 &amp;lt; sprite.right) {
        // 速度を反転する
        sprite.vx *= -1;
      }
    };
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
    // アセット読み込み
    assets: ASSETS,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Spriteをフレームアニメーションしながら移動させる</title>
      <link>https://alkn203.github.io/blog/2017/05/16/frame-move-sprite</link>
      <pubDate>Tue, 16 May 2017 21:15:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/16/frame-move-sprite</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;スプライトをフレームアニメーションしながら移動させる方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/frame-move-sprite.gif&#34; alt=&#34;frame-move-sprite.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/762f81e9&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;スプライトを移動させる&#34;&gt;スプライトを移動させる&lt;/h3&gt;

&lt;p&gt;フレームアニメーションは自動で管理されていますので、&lt;strong&gt;update&lt;/strong&gt;メソッド内に移動処理を書くだけで大丈夫です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    // 更新イベント
    sprite.update = function() {
      // 移動
      sprite.x -= 2;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;サンプルコード&#34;&gt;サンプルコード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// アセット
var ASSETS = {
  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko_ss.png&#39;,
  },
  // スプライトシート
  spritesheet: {
    &amp;quot;tomapiko_ss&amp;quot;:
    {
      // フレーム情報
      &amp;quot;frame&amp;quot;: {
        &amp;quot;width&amp;quot;: 64, // 1フレームの画像サイズ（横）
        &amp;quot;height&amp;quot;: 64, // 1フレームの画像サイズ（縦）
        &amp;quot;cols&amp;quot;: 6, // フレーム数（横）
        &amp;quot;rows&amp;quot;: 3, // フレーム数（縦）
      },
      // アニメーション情報
      &amp;quot;animations&amp;quot; : {
        &amp;quot;walk&amp;quot;: { // アニメーション名
          &amp;quot;frames&amp;quot;: [12,13,14], // フレーム番号範囲
          &amp;quot;next&amp;quot;: &amp;quot;walk&amp;quot;, // 次のアニメーション
          &amp;quot;frequency&amp;quot;: 6, // アニメーション間隔
        },
      }
    },
  }
};
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景
    this.backgroundColor = &#39;skyblue&#39;;
    // スプライト画像作成
    var sprite = Sprite(&#39;tomapiko&#39;, 64, 64).addChildTo(this);
    // スプライトにフレームアニメーションをアタッチ
    var anim = FrameAnimation(&#39;tomapiko_ss&#39;).attachTo(sprite);
    // アニメーションを指定する
    anim.gotoAndPlay(&#39;walk&#39;);
    // 初期位置
    sprite.x = this.gridX.center();
    sprite.y = this.gridY.center();
    // 更新イベント
    sprite.update = function() {
      // 移動
      sprite.x -= 2;
    };
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
    // アセット読み込み
    assets: ASSETS,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>スプライトにフレームアニメーションをさせる</title>
      <link>https://alkn203.github.io/blog/2017/05/15/frameanimation-sprite</link>
      <pubDate>Mon, 15 May 2017 21:15:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/15/frameanimation-sprite</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;スプライトにフレームアニメーションをさせる方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/frameanimation-sprite.gif&#34; alt=&#34;frameanimation-sprite.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/b8bd67e6&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;スプライトシート画像を用意する&#34;&gt;スプライトシート画像を用意する&lt;/h3&gt;

&lt;p&gt;スプライトシート画像とは、以下のようにアニメーション用のコマをシートの様に並べた画像です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/tomapiko_ss.png&#34; alt=&#34;tomapiko_ss.png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;上の画像だと、横6x縦3の計18コマから成り立っています。&lt;/li&gt;
&lt;li&gt;ゲーム作成ではコマのことを&lt;strong&gt;フレーム&lt;/strong&gt;と呼ぶことが多いです。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;スプライトシート画像を読み込む&#34;&gt;スプライトシート画像を読み込む&lt;/h3&gt;

&lt;p&gt;通常の画像と同じように&lt;strong&gt;ASSETS&lt;/strong&gt;として読み込みます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko_ss.png&#39;,
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;フレームアニメーション情報を読み込む&#34;&gt;フレームアニメーション情報を読み込む&lt;/h3&gt;

&lt;p&gt;次に、フレームアニメーション情報が定義された&lt;strong&gt;json&lt;/strong&gt;形式のファイルを読み込みます。
今回はファイルからではなく&lt;strong&gt;ASEETS&lt;/strong&gt;として、コード内に定義しています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  // スプライトシート
  spritesheet: {
    &amp;quot;tomapiko_ss&amp;quot;:
    {
      // フレーム情報
      &amp;quot;frame&amp;quot;: {
        &amp;quot;width&amp;quot;: 64, // 1フレームの画像サイズ（横）
        &amp;quot;height&amp;quot;: 64, // 1フレームの画像サイズ（縦）
        &amp;quot;cols&amp;quot;: 6, // フレーム数（横）
        &amp;quot;rows&amp;quot;: 3, // フレーム数（縦）
      },
      // アニメーション情報
      &amp;quot;animations&amp;quot; : {
        &amp;quot;walk&amp;quot;: { // アニメーション名
          &amp;quot;frames&amp;quot;: [12,13,14], // フレーム番号範囲
          &amp;quot;next&amp;quot;: &amp;quot;walk&amp;quot;, // 次のアニメーション
          &amp;quot;frequency&amp;quot;: 6, // アニメーション間隔
        },
      }
    },
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;frames&lt;/strong&gt;にアニメーションに使いたいフレーム番号の範囲を書きます。&lt;strong&gt;0&lt;/strong&gt;から始まることに注意してください。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;next&lt;/strong&gt;に次のアニメーションを指定します。同じ名前にするとループします。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;frequency&lt;/strong&gt;でアニメーションの間隔を指定します。小さくすれば速くなり、大きくすれば遅くなります。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;スプライトシート画像の作成&#34;&gt;スプライトシート画像の作成&lt;/h3&gt;

&lt;p&gt;スプライトシート画像は、通常の画像と同じく&lt;strong&gt;Sprite&lt;/strong&gt;クラスを使って作成しますが、アセット名の次の引数で&lt;strong&gt;１フレームの画像サイズ&lt;/strong&gt;を指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    // スプライト画像作成
    var sprite = Sprite(&#39;tomapiko&#39;, 64, 64).addChildTo(this);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;フレームアニメーションの設定&#34;&gt;フレームアニメーションの設定&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    // スプライトにフレームアニメーションをアタッチ
    var anim = FrameAnimation(&#39;tomapiko_ss&#39;).attachTo(sprite);
    // アニメーションを指定
    anim.gotoAndPlay(&#39;walk&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FrameAnimation&lt;/strong&gt;クラスのコンストラクタにスプライトシートのアセット名を指定して、スプライトにアタッチします。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gotoAndPlay&lt;/strong&gt;関数にアニメーション名を指定すると、そのアニメーションが自動で再生されます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// アセット
var ASSETS = {
  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko_ss.png&#39;,
  },
  // スプライトシート
  spritesheet: {
    &amp;quot;tomapiko_ss&amp;quot;:
    {
      // フレーム情報
      &amp;quot;frame&amp;quot;: {
        &amp;quot;width&amp;quot;: 64, // 1フレームの画像サイズ（横）
        &amp;quot;height&amp;quot;: 64, // 1フレームの画像サイズ（縦）
        &amp;quot;cols&amp;quot;: 6, // フレーム数（横）
        &amp;quot;rows&amp;quot;: 3, // フレーム数（縦）
      },
      // アニメーション情報
      &amp;quot;animations&amp;quot; : {
        &amp;quot;walk&amp;quot;: { // アニメーション名
          &amp;quot;frames&amp;quot;: [12,13,14], // フレーム番号範囲
          &amp;quot;next&amp;quot;: &amp;quot;walk&amp;quot;, // 次のアニメーション
          &amp;quot;frequency&amp;quot;: 6, // アニメーション間隔
        },
      }
    },
  }
};
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景
    this.backgroundColor = &#39;skyblue&#39;;
    // スプライト画像作成
    var sprite = Sprite(&#39;tomapiko&#39;, 64, 64).addChildTo(this);
    // スプライトにフレームアニメーションをアタッチ
    var anim = FrameAnimation(&#39;tomapiko_ss&#39;).attachTo(sprite);
    // アニメーションを指定
    anim.gotoAndPlay(&#39;walk&#39;);
    // 初期位置
    sprite.x = this.gridX.center();
    sprite.y = this.gridY.center();
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
    // アセット読み込み
    assets: ASSETS,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Spriteを透明にする</title>
      <link>https://alkn203.github.io/blog/2017/05/14/alpha-sprite</link>
      <pubDate>Sun, 14 May 2017 21:15:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/14/alpha-sprite</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;スプライトを透明にする方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/alpha-sprite.gif&#34; alt=&#34;alpha-sprite.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/21f2a1e1&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;スプライトを透明にする-alpha&#34;&gt;スプライトを透明にする（alpha）&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Sprite&lt;/strong&gt;の&lt;strong&gt;alpha&lt;/strong&gt;プロパティを変更します。初期値は&lt;strong&gt;1.0&lt;/strong&gt;で&lt;strong&gt;0&lt;/strong&gt;に近づくにつれて透明度が増していきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    // 徐々に透明にする
    sprite.update = function() {
      if (sprite.alpha &amp;lt; 0.01) {
        sprite.alpha = 0;
        return;
      }
      sprite.alpha -= 0.01;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;スプライトの&lt;strong&gt;update&lt;/strong&gt;関数を利用して徐々に透明にしています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;canvas&lt;/strong&gt;の仕様で&lt;strong&gt;alpha&lt;/strong&gt;が負の値になると透明度が無効になるため、条件式で&lt;strong&gt;0&lt;/strong&gt;にしています。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##サンプルコード&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// アセット
var ASSETS = {
  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko.png&#39;,
  },
};
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景
    this.backgroundColor = &#39;skyblue&#39;;
    // スプライト作成
    var sprite = Sprite(&#39;tomapiko&#39;).addChildTo(this);
    // 初期位置
    sprite.x = this.gridX.center();
    sprite.y = this.gridY.center();
    // 徐々に透明にする
    sprite.update = function() {
      if (sprite.alpha &amp;lt; 0.01) {
        sprite.alpha = 0;
        return;
      }
      sprite.alpha -= 0.01;
    };
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
    // アセット読み込み
    assets: ASSETS,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Spriteを拡大・縮小させる（setScale使用）</title>
      <link>https://alkn203.github.io/blog/2017/05/13/resize-sprite</link>
      <pubDate>Sat, 13 May 2017 21:15:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/13/resize-sprite</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;スプライト画像に拡大・縮小率を指定する方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/resize-sprite.gif&#34; alt=&#34;resize-sprite.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/e7e075a0&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;スプライトの拡大-縮小-setscale&#34;&gt;スプライトの拡大・縮小（setScale）&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Sprite&lt;/strong&gt;の拡大・縮小率を指定するには&lt;strong&gt;setScale&lt;/strong&gt;関数を使用します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    // スプライト拡大
    sprite.setScale(2.0, 2.0);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1.0&lt;/strong&gt;を基準として、小さければ縮小、大きければ拡大になります。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// アセット
var ASSETS = {
  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko.png&#39;,
  },
};
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景
    this.backgroundColor = &#39;skyblue&#39;;
    // スプライト作成
    var sprite = Sprite(&#39;tomapiko&#39;).addChildTo(this);
    // 初期位置
    sprite.x = this.gridX.center();
    sprite.y = this.gridY.center();
    // スプライト拡大
    sprite.setScale(2.0, 2.0);
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    //startLabel: &#39;main&#39;,
    // アセット読み込み
    assets: ASSETS,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Spriteを回転させる（setRotation）</title>
      <link>https://alkn203.github.io/blog/2017/05/13/rotate-sprite2</link>
      <pubDate>Sat, 13 May 2017 20:15:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/13/rotate-sprite2</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;スプライト画像の回転角度を指定する方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/rotate-sprite2.gif&#34; alt=&#34;rotate-sprite2.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/7af9afc0&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;スプライトの回転角度指定&#34;&gt;スプライトの回転角度指定&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Sprite&lt;/strong&gt;の回転角度を指定するには、&lt;strong&gt;setRotation&lt;/strong&gt;関数を使用します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// スプライト回転
sprite.setRotation(45);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;引数はラジアン(radian)ではなく&lt;strong&gt;度(degree)&lt;/strong&gt;です。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// アセット
var ASSETS = {
  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko.png&#39;,
  },
};
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景
    this.backgroundColor = &#39;skyblue&#39;;
    // スプライト画像作成
    var sprite = Sprite(&#39;tomapiko&#39;).addChildTo(this);
    // 初期位置
    sprite.x = this.gridX.center();
    sprite.y = this.gridY.center();
    // スプライト回転
    sprite.setRotation(45);
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
    // アセット読み込み
    assets: ASSETS,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Spriteを回転させる</title>
      <link>https://alkn203.github.io/blog/2017/05/12/rotate-sprite</link>
      <pubDate>Fri, 12 May 2017 20:15:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/12/rotate-sprite</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;スプライト画像を回転する方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/rotate-sprite.gif&#34; alt=&#34;rotate-sprite.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/81cfe487&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;スプライトの回転&#34;&gt;スプライトの回転&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Sprite&lt;/strong&gt;の&lt;strong&gt;update&lt;/strong&gt;関数でプロパティ&lt;strong&gt;rotation&lt;/strong&gt;の値を変更することで回転させることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    // スプライト回転
    sprite.update = function() {
      sprite.rotation++;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;今回は&lt;strong&gt;rotation&lt;/strong&gt;の値を1ずつ増やしています。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// アセット
var ASSETS = {
  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko.png&#39;,
  },
};
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景
    this.backgroundColor = &#39;skyblue&#39;;
    // スプライト作成
    var sprite = Sprite(&#39;tomapiko&#39;).addChildTo(this);
    // 初期位置
    sprite.x = this.gridX.center();
    sprite.y = this.gridY.center();
    // スプライト回転
    sprite.update = function() {
      sprite.rotation++;
    };
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
    // アセット読み込み
    assets: ASSETS,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Spriteを移動させる</title>
      <link>https://alkn203.github.io/blog/2017/05/11/move-sprite</link>
      <pubDate>Thu, 11 May 2017 20:15:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/11/move-sprite</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;スプライト画像を移動する方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/move-sprite.gif&#34; alt=&#34;move-sprite.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/bab85342&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;スプライトの移動&#34;&gt;スプライトの移動&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Sprite&lt;/strong&gt;の&lt;strong&gt;update&lt;/strong&gt;関数に座標を変更する処理を書くと、毎フレーム呼ばれるので移動させることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    // スプライト移動
    sprite.update = function() {
      sprite.moveBy(2, 1);
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;今回使った&lt;strong&gt;moveBy&lt;/strong&gt;関数は引数で与えれた数値ずつ&lt;strong&gt;x,y&lt;/strong&gt;の値を増やす処理をします。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// アセット
var ASSETS = {
  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko.png&#39;,
  },
};
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景
    this.backgroundColor = &#39;skyblue&#39;;
    // スプライト作成
    var sprite = Sprite(&#39;tomapiko&#39;).addChildTo(this);
    // 初期位置
    sprite.x = this.gridX.center();
    sprite.y = this.gridY.center();
    // スプライト移動
    sprite.update = function() {
      sprite.moveBy(2, 1);
    };
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
    // アセット読み込み
    assets: ASSETS,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Spriteを表示する</title>
      <link>https://alkn203.github.io/blog/2017/05/02/display-sprite</link>
      <pubDate>Tue, 02 May 2017 20:15:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/02/display-sprite</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;ゲーム作成ではポピュラーなスプライト画像を表示する方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/display-sprite.gif&#34; alt=&#34;display-sprite.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/91bff4d6&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;アセットの読み込み&#34;&gt;アセットの読み込み&lt;/h3&gt;

&lt;p&gt;スプライトを表示するためには、まず使用する画像をアセットとして読み込む必要があります。&lt;/p&gt;

&lt;h3 id=&#34;アセットの定義&#34;&gt;アセットの定義&lt;/h3&gt;

&lt;p&gt;アセットは以下のように定義します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// アセット
var ASSETS = {
  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko.png&#39;,
  },
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;image&lt;/strong&gt;はアセットの種類です。&lt;/li&gt;
&lt;li&gt;連想配列の左側にキー名、右側に使用するアセットの場所を書きます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;アセットの読み込み-1&#34;&gt;アセットの読み込み&lt;/h3&gt;

&lt;p&gt;読み込むためには、メイン関数の&lt;strong&gt;GameApp&lt;/strong&gt;のコンストラクタのプロパティ&lt;strong&gt;assets&lt;/strong&gt;に定義したアセットを引き渡します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
    // アセット読み込み
    assets: ASSETS,
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// グローバルに展開
phina.globalize();
// アセット
var ASSETS = {
  // 画像
  image: {
    &#39;tomapiko&#39;: &#39;https://rawgit.com/phi-jp/phina.js/develop/assets/images/tomapiko.png&#39;,
  },
};
/*
 * メインシーン
 */
phina.define(&amp;quot;MainScene&amp;quot;, {
  // 継承
  superClass: &#39;DisplayScene&#39;,
  // コンストラクタ
  init: function() {
    // 親クラス初期化
    this.superInit();
    // 背景
    this.backgroundColor = &#39;skyblue&#39;;
    // スプライト画像作成
    var sprite = Sprite(&#39;tomapiko&#39;).addChildTo(this);
    // 初期位置
    sprite.x = this.gridX.center();
    sprite.y = this.gridY.center();
  },
});
/*
 * メイン処理
 */
phina.main(function() {
  // アプリケーションを生成
  var app = GameApp({
    // MainScene から開始
    startLabel: &#39;main&#39;,
    // アセット読み込み
    assets: ASSETS,
  });
  // fps表示
  //app.enableStats();
  // 実行
  app.run();
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>特定の種類のイベントを全て削除する</title>
      <link>https://alkn203.github.io/blog/2017/05/02/delete-specify-event</link>
      <pubDate>Tue, 02 May 2017 00:15:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2017/05/02/delete-specify-event</guid>
      <description>

&lt;h2 id=&#34;今回のtips&#34;&gt;今回のTips&lt;/h2&gt;

&lt;p&gt;特定の種類のイベントを全て削除する方法について説明します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://alkn203.github.io/blog/images/touch-shape.gif&#34; alt=&#34;touch-shape.gif&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;clear-メソッド&#34;&gt;clear メソッド&lt;/h3&gt;

&lt;p&gt;特定のイベントの登録を全て削除するには、以下のように&lt;strong&gt;clear&lt;/strong&gt;を使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shape.clear(&#39;enterframe&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下の例では、&lt;strong&gt;enterframe&lt;/strong&gt;イベントを2つ登録しており、タッチするとそれが削除されるようにしています。結果として、&lt;strong&gt;shape&lt;/strong&gt;のサイズ拡大が止まります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    // 更新イベント登録
    shape.on(&#39;enterframe&#39;, function() {
      shape.width++;  
    });
    // 更新イベント更新登録
    shape.on(&#39;enterframe&#39;, function() {
      shape.height++;  
    });
    // タッチイベント登録
    shape.on(&#39;pointstart&#39;, function() {
      // 特定の種類のイベント登録を全て削除する
      shape.clear(&#39;enterframe&#39;);
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://runstant.com/alkn203/projects/d6d50d82&#34; target=&#34;_blank&#34;&gt;[runstantで確認]&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>