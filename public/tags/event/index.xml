<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>event on Keep On Coding</title>
    <link>https://alkn203.github.io/blog/tags/event/</link>
    <description>Recent content in event on Keep On Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 24 Jun 2021 15:59:06 +0900</lastBuildDate><atom:link href="https://alkn203.github.io/blog/tags/event/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>登録したイベントを削除する</title>
      <link>https://alkn203.github.io/blog/2021/06/24/remove-event/</link>
      <pubDate>Thu, 24 Jun 2021 15:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/24/remove-event/</guid>
      <description>イベントの削除 イベントを削除するためには、off メソッドを使います。
// タッチ関数 var touchFunc = function() { alert(&amp;#34;タッチされました&amp;#34;); // 2度と呼ばないよう解除する  shape.off(&amp;#34;pointstart&amp;#34;, touchFunc); }; // タッチ開始時に呼ばれる関数を登録 shape.on(&amp;#39;pointstart&amp;#39;, touchFunc); };  offでは第2引数に関数を指定する必要があるため、 touchFuncとして別に定義しています。 実行すると、タッチイベントが1回だけしか発生しないのが分かります。  サンプルコード  コードを見る // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // Shapeを作成してシーンに追加・位置指定  var shape = Shape().addChildTo(this).setPosition(320, 480); // 背景色設定  shape.</description>
    </item>
    
    <item>
      <title>独自のイベントを登録・発行する</title>
      <link>https://alkn203.github.io/blog/2021/06/24/original-event/</link>
      <pubDate>Thu, 24 Jun 2021 14:59:06 +0900</pubDate>
      
      <guid>https://alkn203.github.io/blog/2021/06/24/original-event/</guid>
      <description>独自イベントの登録 Shapeに対して独自のイベントを登録・発行する方法についてします。
on + イベント名  オブジェクトに独自イベントを登録するためには、on + イベント名 の関数をオブジェクトに実装します。 今回はイベント名をhitとしたいのでonhitとしました。  // hitイベント登録 shape.onhit = function() { alert(&amp;#39;Hit!&amp;#39;); }; 独自イベント発行 イベントの発行は、flare(イベント名)で行います。
// タッチイベント登録 shape.onpointstart = function() { // hitイベント発行  shape.flare(&amp;#39;hit&amp;#39;); }; サンプルコード  コードを見る // グローバルに展開 phina.globalize(); /* * メインシーン */ phina.define(&amp;#34;MainScene&amp;#34;, { // 継承  superClass: &amp;#39;DisplayScene&amp;#39;, // 初期化  init: function() { // 親クラス初期化  this.superInit(); // 背景色  this.backgroundColor = &amp;#39;black&amp;#39;; // Shapeを作成してシーンに追加・位置指定  var shape = Shape().</description>
    </item>
    
  </channel>
</rss>
